"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Bet_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Bet"));
const Cart_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cart"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const sendMail_1 = global[Symbol.for('ioc.use')]("App/Services/sendMail");
const smToAdm_1 = global[Symbol.for('ioc.use')]("App/Services/smToAdm");
const BetValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/BetValidator"));
class BetsController {
    async index({ request, response }) {
        const { page, perPage, noPaginate } = request.qs();
        if (noPaginate) {
            return Bet_1.default.query();
        }
        try {
            const bets = await Bet_1.default.query().paginate(page || 1, perPage || 10);
            return response.ok(bets);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in list bets', originalError: error.message });
        }
    }
    async store({ response, request, auth }) {
        const data = await request.validate(BetValidator_1.default);
        const user = await User_1.default.findByOrFail('id', auth.user?.id);
        const cart = await Cart_1.default.findByOrFail('id', 1);
        let bet;
        const trx = await Database_1.default.transaction();
        if (data.validCart === 30)
            return response.status(422).json({ message: 'Total price is below to min cart value' });
        try {
            bet = await Bet_1.default.create({
                numbers: data.numbers.join(),
                userId: auth.user?.id,
                gameId: data.game,
            }, trx);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in store bet', originalError: error.message });
        }
        let betFind;
        try {
            betFind = await Bet_1.default.query().where('id', bet.id);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find bet', originalError: error.message });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'Thank you for your bet!', 'send_new_bet_email');
            await (0, smToAdm_1.smToAdm)(user);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in send email',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok(betFind);
    }
    async show({ response, params }) {
        const betId = params.id;
        try {
            const bet = await Bet_1.default.query().where('id', betId);
            return response.ok(bet);
        }
        catch (error) {
            return response.notFound({ message: 'Bet not found', originalError: error.message });
        }
    }
    async destroy({ response, params }) {
        const betId = params.id;
        try {
            const bet = await Bet_1.default.findByOrFail('id', betId);
            await bet.delete();
            return response.ok({ message: 'Bet deleted' });
        }
        catch (error) {
            return response.notFound({ message: 'Bet not found', originalError: error.message });
        }
    }
}
exports.default = BetsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmV0c0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCZXRzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJGQUFpRDtBQUNqRCwrRUFBZ0M7QUFDaEMsaUZBQWtDO0FBRWxDLGlGQUFrQztBQUNsQywwRUFBZ0Q7QUFDaEQsd0VBQThDO0FBQzlDLHFHQUFzRDtBQUV0RCxNQUFxQixjQUFjO0lBQzFCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF1QjtRQUMzRCxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUE7UUFFbEQsSUFBSSxVQUFVLEVBQUU7WUFDZCxPQUFPLGFBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUNuQjtRQUVELElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLGFBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxPQUFPLElBQUksRUFBRSxDQUFDLENBQUE7WUFFakUsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ3pCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1NBQzVGO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBdUI7UUFDakUsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLHNCQUFZLENBQUMsQ0FBQTtRQUVqRCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FB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QUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUMvQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUVsQixPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtTQUMvQztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDckY7SUFDSCxDQUFDO0NBQ0Y7QUEzRkQsaUNBMkZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSdcbmltcG9ydCBCZXQgZnJvbSAnQXBwL01vZGVscy9CZXQnXG5pbXBvcnQgQ2FydCBmcm9tICdBcHAvTW9kZWxzL0NhcnQnXG5cbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcbmltcG9ydCB7IHNlbmRNYWlsIH0gZnJvbSAnQXBwL1NlcnZpY2VzL3NlbmRNYWlsJ1xuaW1wb3J0IHsgc21Ub0FkbSB9IGZyb20gJ0FwcC9TZXJ2aWNlcy9zbVRvQWRtJ1xuaW1wb3J0IEJldFZhbGlkYXRvciBmcm9tICdBcHAvVmFsaWRhdG9ycy9CZXRWYWxpZGF0b3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJldHNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGluZGV4KHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgcGFnZSwgcGVyUGFnZSwgbm9QYWdpbmF0ZSB9ID0gcmVxdWVzdC5xcygpXG5cbiAgICBpZiAobm9QYWdpbmF0ZSkge1xuICAgICAgcmV0dXJuIEJldC5xdWVyeSgpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJldHMgPSBhd2FpdCBCZXQucXVlcnkoKS5wYWdpbmF0ZShwYWdlIHx8IDEsIHBlclBhZ2UgfHwgMTApXG5cbiAgICAgIHJldHVybiByZXNwb25zZS5vayhiZXRzKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7IG1lc3NhZ2U6ICdFcnJvciBpbiBsaXN0IGJldHMnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVzcG9uc2UsIHJlcXVlc3QsIGF1dGggfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKEJldFZhbGlkYXRvcilcblxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgnaWQnLCBhdXRoLnVzZXI/LmlkKVxuICAgIGNvbnN0IGNhcnQgPSBhd2FpdCBDYXJ0LmZpbmRCeU9yRmFpbCgnaWQnLCAxKVxuXG4gICAgbGV0IGJldFxuICAgIGNvbnN0IHRyeCA9IGF3YWl0IERhdGFiYXNlLnRyYW5zYWN0aW9uKClcblxuICAgIGlmIChkYXRhLnZhbGlkQ2FydCA9PT0gMzApXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQyMikuanNvbih7IG1lc3NhZ2U6ICdUb3RhbCBwcmljZSBpcyBiZWxvdyB0byBtaW4gY2FydCB2YWx1ZScgfSlcblxuICAgIHRyeSB7XG4gICAgICBiZXQgPSBhd2FpdCBCZXQuY3JlYXRlKFxuICAgICAgICB7XG4gICAgICAgICAgbnVtYmVyczogZGF0YS5udW1iZXJzLmpvaW4oKSxcbiAgICAgICAgICB1c2VySWQ6IGF1dGgudXNlcj8uaWQsXG4gICAgICAgICAgZ2FtZUlkOiBkYXRhLmdhbWUsXG4gICAgICAgIH0sXG4gICAgICAgIHRyeFxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cngucm9sbGJhY2soKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoeyBtZXNzYWdlOiAnRXJyb3IgaW4gc3RvcmUgYmV0Jywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cblxuICAgIGxldCBiZXRGaW5kXG5cbiAgICB0cnkge1xuICAgICAgYmV0RmluZCA9IGF3YWl0IEJldC5xdWVyeSgpLndoZXJlKCdpZCcsIGJldC5pZClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ4LnJvbGxiYWNrKClcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHsgbWVzc2FnZTogJ0Vycm9yIGluIGZpbmQgYmV0Jywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBzZW5kTWFpbCh1c2VyLCAnVGhhbmsgeW91IGZvciB5b3VyIGJldCEnLCAnc2VuZF9uZXdfYmV0X2VtYWlsJylcbiAgICAgIGF3YWl0IHNtVG9BZG0odXNlcilcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ4LnJvbGxiYWNrKClcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHtcbiAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGluIHNlbmQgZW1haWwnLFxuICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgfSlcbiAgICB9XG4gICAgdHJ4LmNvbW1pdCgpXG5cbiAgICByZXR1cm4gcmVzcG9uc2Uub2soYmV0RmluZClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93KHsgcmVzcG9uc2UsIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgYmV0SWQgPSBwYXJhbXMuaWRcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBiZXQgPSBhd2FpdCBCZXQucXVlcnkoKS53aGVyZSgnaWQnLCBiZXRJZClcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKGJldClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLm5vdEZvdW5kKHsgbWVzc2FnZTogJ0JldCBub3QgZm91bmQnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlc3Ryb3koeyByZXNwb25zZSwgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBiZXRJZCA9IHBhcmFtcy5pZFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJldCA9IGF3YWl0IEJldC5maW5kQnlPckZhaWwoJ2lkJywgYmV0SWQpXG4gICAgICBhd2FpdCBiZXQuZGVsZXRlKClcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKHsgbWVzc2FnZTogJ0JldCBkZWxldGVkJyB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uubm90Rm91bmQoeyBtZXNzYWdlOiAnQmV0IG5vdCBmb3VuZCcsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==