"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Bet_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Bet"));
const Cart_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cart"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const sendMail_1 = global[Symbol.for('ioc.use')]("App/Services/sendMail");
const BetValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/BetValidator"));
class BetsController {
    async index({ request, response }) {
        const { page, perPage, noPaginate } = request.qs();
        if (noPaginate) {
            return Bet_1.default.query();
        }
        try {
            const bets = await Bet_1.default.query().paginate(page || 1, perPage || 10);
            return response.ok(bets);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in list bets', originalError: error.message });
        }
    }
    async store({ response, request, auth }) {
        const data = await request.validate(BetValidator_1.default);
        const user = await User_1.default.findByOrFail('id', auth.user?.id);
        const cart = await Cart_1.default.findByOrFail('id', 1);
        let bet;
        const trx = await Database_1.default.transaction();
        try {
            bet = await Bet_1.default.create({
                numbers: data.numbers.join(),
                userId: auth.user?.id,
                gameId: data.game,
            }, trx);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in store bet', originalError: error.message });
        }
        let betFind;
        try {
            betFind = await Bet_1.default.query().where('id', bet.id);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find bet', originalError: error.message });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'email/new_bet');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in send email',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok(betFind);
    }
    async show({ response, params }) {
        const betId = params.id;
        try {
            const bet = await Bet_1.default.query().where('id', betId);
            return response.ok(bet);
        }
        catch (error) {
            return response.notFound({ message: 'Bet not found', originalError: error.message });
        }
    }
    async destroy({ response, params }) {
        const betId = params.id;
        try {
            const bet = await Bet_1.default.findByOrFail('id', betId);
            await bet.delete();
            return response.ok({ message: 'Bet deleted' });
        }
        catch (error) {
            return response.notFound({ message: 'Bet not found', originalError: error.message });
        }
    }
}
exports.default = BetsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmV0c0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCZXRzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJGQUFpRDtBQUNqRCwrRUFBZ0M7QUFDaEMsaUZBQWtDO0FBRWxDLGlGQUFrQztBQUNsQywwRUFBZ0Q7QUFDaEQscUdBQXNEO0FBRXRELE1BQXFCLGNBQWM7SUFDMUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzNELE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQTtRQUVsRCxJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sYUFBRyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQ25CO1FBRUQsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUVqRSxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDekI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDNUY7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUF1QjtRQUNqRSxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsc0JBQVksQ0FBQyxDQUFBO1FBRWpELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxF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QUFDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDckY7SUFDSCxDQUFDO0NBQ0Y7QUF2RkQsaUNBdUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSdcbmltcG9ydCBCZXQgZnJvbSAnQXBwL01vZGVscy9CZXQnXG5pbXBvcnQgQ2FydCBmcm9tICdBcHAvTW9kZWxzL0NhcnQnXG5cbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcbmltcG9ydCB7IHNlbmRNYWlsIH0gZnJvbSAnQXBwL1NlcnZpY2VzL3NlbmRNYWlsJ1xuaW1wb3J0IEJldFZhbGlkYXRvciBmcm9tICdBcHAvVmFsaWRhdG9ycy9CZXRWYWxpZGF0b3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJldHNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGluZGV4KHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgcGFnZSwgcGVyUGFnZSwgbm9QYWdpbmF0ZSB9ID0gcmVxdWVzdC5xcygpXG5cbiAgICBpZiAobm9QYWdpbmF0ZSkge1xuICAgICAgcmV0dXJuIEJldC5xdWVyeSgpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJldHMgPSBhd2FpdCBCZXQucXVlcnkoKS5wYWdpbmF0ZShwYWdlIHx8IDEsIHBlclBhZ2UgfHwgMTApXG5cbiAgICAgIHJldHVybiByZXNwb25zZS5vayhiZXRzKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7IG1lc3NhZ2U6ICdFcnJvciBpbiBsaXN0IGJldHMnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVzcG9uc2UsIHJlcXVlc3QsIGF1dGggfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKEJldFZhbGlkYXRvcilcblxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgnaWQnLCBhdXRoLnVzZXI/LmlkKVxuICAgIGNvbnN0IGNhcnQgPSBhd2FpdCBDYXJ0LmZpbmRCeU9yRmFpbCgnaWQnLCAxKVxuXG4gICAgbGV0IGJldFxuICAgIGNvbnN0IHRyeCA9IGF3YWl0IERhdGFiYXNlLnRyYW5zYWN0aW9uKClcblxuICAgIHRyeSB7XG4gICAgICBiZXQgPSBhd2FpdCBCZXQuY3JlYXRlKFxuICAgICAgICB7XG4gICAgICAgICAgbnVtYmVyczogZGF0YS5udW1iZXJzLmpvaW4oKSxcbiAgICAgICAgICB1c2VySWQ6IGF1dGgudXNlcj8uaWQsXG4gICAgICAgICAgZ2FtZUlkOiBkYXRhLmdhbWUsXG4gICAgICAgIH0sXG4gICAgICAgIHRyeFxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cngucm9sbGJhY2soKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoeyBtZXNzYWdlOiAnRXJyb3IgaW4gc3RvcmUgYmV0Jywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cblxuICAgIGxldCBiZXRGaW5kXG5cbiAgICB0cnkge1xuICAgICAgYmV0RmluZCA9IGF3YWl0IEJldC5xdWVyeSgpLndoZXJlKCdpZCcsIGJldC5pZClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ4LnJvbGxiYWNrKClcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHsgbWVzc2FnZTogJ0Vycm9yIGluIGZpbmQgYmV0Jywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBzZW5kTWFpbCh1c2VyLCAnZW1haWwvbmV3X2JldCcpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvciBpbiBzZW5kIGVtYWlsJyxcbiAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIH0pXG4gICAgfVxuICAgIHRyeC5jb21taXQoKVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLm9rKGJldEZpbmQpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2hvdyh7IHJlc3BvbnNlLCBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGJldElkID0gcGFyYW1zLmlkXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgYmV0ID0gYXdhaXQgQmV0LnF1ZXJ5KCkud2hlcmUoJ2lkJywgYmV0SWQpXG5cbiAgICAgIHJldHVybiByZXNwb25zZS5vayhiZXQpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5ub3RGb3VuZCh7IG1lc3NhZ2U6ICdCZXQgbm90IGZvdW5kJywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZXN0cm95KHsgcmVzcG9uc2UsIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgYmV0SWQgPSBwYXJhbXMuaWRcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBiZXQgPSBhd2FpdCBCZXQuZmluZEJ5T3JGYWlsKCdpZCcsIGJldElkKVxuICAgICAgYXdhaXQgYmV0LmRlbGV0ZSgpXG5cbiAgICAgIHJldHVybiByZXNwb25zZS5vayh7IG1lc3NhZ2U6ICdCZXQgZGVsZXRlZCcgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLm5vdEZvdW5kKHsgbWVzc2FnZTogJ0JldCBub3QgZm91bmQnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuICB9XG59XG4iXX0=