"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Bet_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Bet"));
const Cart_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cart"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const sendMail_1 = global[Symbol.for('ioc.use')]("App/Services/sendMail");
const BetValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/BetValidator"));
class BetsController {
    async index({ request, response }) {
        const { page, perPage, noPaginate } = request.qs();
        if (noPaginate) {
            return Bet_1.default.query();
        }
        try {
            const bets = await Bet_1.default.query().paginate(page || 1, perPage || 10);
            return response.ok(bets);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in list bets', originalError: error.message });
        }
    }
    async store({ response, request, auth }) {
        const data = await request.validate(BetValidator_1.default);
        const user = await User_1.default.findByOrFail('id', auth.user?.id);
        const cart = await Cart_1.default.findByOrFail('id', 1);
        let bet;
        const trx = await Database_1.default.transaction();
        if (data.validCart === 30)
            return response.status(422).json({ message: 'Total price is below to min cart value' });
        try {
            bet = await Bet_1.default.create({
                numbers: data.numbers.join(),
                userId: auth.user?.id,
                gameId: data.game,
            }, trx);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in store bet', originalError: error.message });
        }
        let betFind;
        try {
            betFind = await Bet_1.default.query().where('id', bet.id);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find bet', originalError: error.message });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'Thank you for your bet!', 'send_new_bet_email');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in send email',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok(betFind);
    }
    async show({ response, params }) {
        const betId = params.id;
        try {
            const bet = await Bet_1.default.query().where('id', betId);
            return response.ok(bet);
        }
        catch (error) {
            return response.notFound({ message: 'Bet not found', originalError: error.message });
        }
    }
    async destroy({ response, params }) {
        const betId = params.id;
        try {
            const bet = await Bet_1.default.findByOrFail('id', betId);
            await bet.delete();
            return response.ok({ message: 'Bet deleted' });
        }
        catch (error) {
            return response.notFound({ message: 'Bet not found', originalError: error.message });
        }
    }
}
exports.default = BetsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmV0c0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCZXRzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJGQUFpRDtBQUNqRCwrRUFBZ0M7QUFDaEMsaUZBQWtDO0FBRWxDLGlGQUFrQztBQUNsQywwRUFBZ0Q7QUFDaEQscUdBQXNEO0FBRXRELE1BQXFCLGNBQWM7SUFDMUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzNELE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQTtRQUVsRCxJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sYUFBRyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQ25CO1FBRUQsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUVqRSxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDekI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDNUY7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUF1QjtRQUNqRSxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsc0JBQVksQ0FBQyxDQUFBO1FBRWpELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxF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R0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO1lBRWxCLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFBO1NBQy9DO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtTQUNyRjtJQUNILENBQUM7Q0FDRjtBQTFGRCxpQ0EwRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJ1xuaW1wb3J0IEJldCBmcm9tICdBcHAvTW9kZWxzL0JldCdcbmltcG9ydCBDYXJ0IGZyb20gJ0FwcC9Nb2RlbHMvQ2FydCdcblxuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuaW1wb3J0IHsgc2VuZE1haWwgfSBmcm9tICdBcHAvU2VydmljZXMvc2VuZE1haWwnXG5pbXBvcnQgQmV0VmFsaWRhdG9yIGZyb20gJ0FwcC9WYWxpZGF0b3JzL0JldFZhbGlkYXRvcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmV0c0NvbnRyb2xsZXIge1xuICBwdWJsaWMgYXN5bmMgaW5kZXgoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgeyBwYWdlLCBwZXJQYWdlLCBub1BhZ2luYXRlIH0gPSByZXF1ZXN0LnFzKClcblxuICAgIGlmIChub1BhZ2luYXRlKSB7XG4gICAgICByZXR1cm4gQmV0LnF1ZXJ5KClcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgYmV0cyA9IGF3YWl0IEJldC5xdWVyeSgpLnBhZ2luYXRlKHBhZ2UgfHwgMSwgcGVyUGFnZSB8fCAxMClcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKGJldHMpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHsgbWVzc2FnZTogJ0Vycm9yIGluIGxpc3QgYmV0cycsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RvcmUoeyByZXNwb25zZSwgcmVxdWVzdCwgYXV0aCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoQmV0VmFsaWRhdG9yKVxuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5T3JGYWlsKCdpZCcsIGF1dGgudXNlcj8uaWQpXG4gICAgY29uc3QgY2FydCA9IGF3YWl0IENhcnQuZmluZEJ5T3JGYWlsKCdpZCcsIDEpXG5cbiAgICBsZXQgYmV0XG4gICAgY29uc3QgdHJ4ID0gYXdhaXQgRGF0YWJhc2UudHJhbnNhY3Rpb24oKVxuXG4gICAgaWYgKGRhdGEudmFsaWRDYXJ0ID09PSAzMClcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDIyKS5qc29uKHsgbWVzc2FnZTogJ1RvdGFsIHByaWNlIGlzIGJlbG93IHRvIG1pbiBjYXJ0IHZhbHVlJyB9KVxuXG4gICAgdHJ5IHtcbiAgICAgIGJldCA9IGF3YWl0IEJldC5jcmVhdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBudW1iZXJzOiBkYXRhLm51bWJlcnMuam9pbigpLFxuICAgICAgICAgIHVzZXJJZDogYXV0aC51c2VyPy5pZCxcbiAgICAgICAgICBnYW1lSWQ6IGRhdGEuZ2FtZSxcbiAgICAgICAgfSxcbiAgICAgICAgdHJ4XG4gICAgICApXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7IG1lc3NhZ2U6ICdFcnJvciBpbiBzdG9yZSBiZXQnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuXG4gICAgbGV0IGJldEZpbmRcblxuICAgIHRyeSB7XG4gICAgICBiZXRGaW5kID0gYXdhaXQgQmV0LnF1ZXJ5KCkud2hlcmUoJ2lkJywgYmV0LmlkKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cngucm9sbGJhY2soKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoeyBtZXNzYWdlOiAnRXJyb3IgaW4gZmluZCBiZXQnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNlbmRNYWlsKHVzZXIsICdUaGFuayB5b3UgZm9yIHlvdXIgYmV0IScsICdzZW5kX25ld19iZXRfZW1haWwnKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cngucm9sbGJhY2soKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe1xuICAgICAgICBtZXNzYWdlOiAnRXJyb3IgaW4gc2VuZCBlbWFpbCcsXG4gICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICB9KVxuICAgIH1cbiAgICB0cnguY29tbWl0KClcblxuICAgIHJldHVybiByZXNwb25zZS5vayhiZXRGaW5kKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNob3coeyByZXNwb25zZSwgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBiZXRJZCA9IHBhcmFtcy5pZFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJldCA9IGF3YWl0IEJldC5xdWVyeSgpLndoZXJlKCdpZCcsIGJldElkKVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2soYmV0KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uubm90Rm91bmQoeyBtZXNzYWdlOiAnQmV0IG5vdCBmb3VuZCcsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSh7IHJlc3BvbnNlLCBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGJldElkID0gcGFyYW1zLmlkXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgYmV0ID0gYXdhaXQgQmV0LmZpbmRCeU9yRmFpbCgnaWQnLCBiZXRJZClcbiAgICAgIGF3YWl0IGJldC5kZWxldGUoKVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2soeyBtZXNzYWdlOiAnQmV0IGRlbGV0ZWQnIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5ub3RGb3VuZCh7IG1lc3NhZ2U6ICdCZXQgbm90IGZvdW5kJywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cbiAgfVxufVxuIl19