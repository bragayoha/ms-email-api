"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Game show', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('user must be logged in before get a game', async ({ client }) => {
        const response = await client.get('/v1/api/games/1');
        response.assertStatus(401);
        response.assertBodyContains({
            errors: [{ message: 'E_UNAUTHORIZED_ACCESS: Unauthorized access' }],
        });
    });
    (0, runner_1.test)('get a game by id', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client.get('/v1/api/games/1').bearerToken(token);
        response.assertStatus(200);
        response.assertBodyContains([
            {
                type: String,
                description: String,
                range: Number,
                price: Number,
                min_and_max_number: Number,
                color: String,
            },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hvdy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkZBQWlEO0FBQ2pELHlDQUFtQztBQUVuQyxhQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQzFCLE1BQU0sa0JBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1FBRXZDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ25ELENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsMENBQTBDLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNwRSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUVwRCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0Q0FBNEMsRUFBRSxDQUFDO1NBQ3BFLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkQsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2xFLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFFdEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXZFLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCO2dCQUNFLElBQUksRUFBRSxNQUFNO2dCQUNaLFdBQVcsRUFBRSxNQUFNO2dCQUNuQixLQUFLLEVBQUUsTUFBTTtnQkFDYixLQUFLLEVBQUUsTUFBTTtnQkFDYixrQkFBa0IsRUFBRSxNQUFNO2dCQUMxQixLQUFLLEVBQUUsTUFBTTthQUNkO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSdcbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ0dhbWUgc2hvdycsIChncm91cCkgPT4ge1xuICBncm91cC5lYWNoLnNldHVwKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcblxuICAgIHJldHVybiAoKSA9PiBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcblxuICB0ZXN0KCd1c2VyIG11c3QgYmUgbG9nZ2VkIGluIGJlZm9yZSBnZXQgYSBnYW1lJywgYXN5bmMgKHsgY2xpZW50IH0pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoJy92MS9hcGkvZ2FtZXMvMScpXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoNDAxKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHtcbiAgICAgIGVycm9yczogW3sgbWVzc2FnZTogJ0VfVU5BVVRIT1JJWkVEX0FDQ0VTUzogVW5hdXRob3JpemVkIGFjY2VzcycgfV0sXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0KCdnZXQgYSBnYW1lIGJ5IGlkJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgbG9naW4gPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnQXV0aENvbnRyb2xsZXIubG9naW4nKSkuZm9ybSh7XG4gICAgICBlbWFpbDogJ2FkbWluQGV4YW1wbGUuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdDEyMycsXG4gICAgfSlcblxuICAgIGNvbnN0IHRva2VuID0gbG9naW4uYm9keSgpLnRva2VuLnRva2VuXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoJy92MS9hcGkvZ2FtZXMvMScpLmJlYXJlclRva2VuKHRva2VuKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoW1xuICAgICAge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsXG4gICAgICAgIHJhbmdlOiBOdW1iZXIsXG4gICAgICAgIHByaWNlOiBOdW1iZXIsXG4gICAgICAgIG1pbl9hbmRfbWF4X251bWJlcjogTnVtYmVyLFxuICAgICAgICBjb2xvcjogU3RyaW5nLFxuICAgICAgfSxcbiAgICBdKVxuICB9KVxufSlcbiJdfQ==