"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Game show', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('user must be logged in before get a game', async ({ client }) => {
        const response = await client.get('/v1/api/games/1');
        response.assertStatus(401);
        response.assertBodyContains({
            errors: [{ message: 'E_UNAUTHORIZED_ACCESS: Unauthorized access' }],
        });
    });
    (0, runner_1.test)('get a game by id', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client.get('/v1/api/games/1').bearerToken(token);
        response.assertStatus(200);
        response.dumpBody();
        response.assertBodyContains([
            {
                type: String,
                description: String,
                range: Number,
                price: Number,
                min_and_max_number: Number,
                color: String,
            },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hvdy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkZBQWlEO0FBQ2pELHlDQUFtQztBQUVuQyxhQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQzFCLE1BQU0sa0JBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1FBRXZDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ25ELENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsMENBQTBDLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNwRSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUVwRCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0Q0FBNEMsRUFBRSxDQUFDO1NBQ3BFLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkQsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2xFLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFFdEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXZFLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ25CLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQjtnQkFDRSxJQUFJLEVBQUUsTUFBTTtnQkFDWixXQUFXLEVBQUUsTUFBTTtnQkFDbkIsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsS0FBSyxFQUFFLE1BQU07Z0JBQ2Isa0JBQWtCLEVBQUUsTUFBTTtnQkFDMUIsS0FBSyxFQUFFLE1BQU07YUFDZDtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5pbXBvcnQgeyB0ZXN0IH0gZnJvbSAnQGphcGEvcnVubmVyJ1xuXG50ZXN0Lmdyb3VwKCdHYW1lIHNob3cnLCAoZ3JvdXApID0+IHtcbiAgZ3JvdXAuZWFjaC5zZXR1cChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgRGF0YWJhc2UuYmVnaW5HbG9iYWxUcmFuc2FjdGlvbigpXG5cbiAgICByZXR1cm4gKCkgPT4gRGF0YWJhc2Uucm9sbGJhY2tHbG9iYWxUcmFuc2FjdGlvbigpXG4gIH0pXG5cbiAgdGVzdCgndXNlciBtdXN0IGJlIGxvZ2dlZCBpbiBiZWZvcmUgZ2V0IGEgZ2FtZScsIGFzeW5jICh7IGNsaWVudCB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KCcvdjEvYXBpL2dhbWVzLzEnKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQwMSlcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFt7IG1lc3NhZ2U6ICdFX1VOQVVUSE9SSVpFRF9BQ0NFU1M6IFVuYXV0aG9yaXplZCBhY2Nlc3MnIH1dLFxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnZ2V0IGEgZ2FtZSBieSBpZCcsIGFzeW5jICh7IGNsaWVudCwgcm91dGUgfSkgPT4ge1xuICAgIGNvbnN0IGxvZ2luID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ0F1dGhDb250cm9sbGVyLmxvZ2luJykpLmZvcm0oe1xuICAgICAgZW1haWw6ICdhZG1pbkBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgIH0pXG5cbiAgICBjb25zdCB0b2tlbiA9IGxvZ2luLmJvZHkoKS50b2tlbi50b2tlblxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KCcvdjEvYXBpL2dhbWVzLzEnKS5iZWFyZXJUb2tlbih0b2tlbilcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDApXG4gICAgcmVzcG9uc2UuZHVtcEJvZHkoKVxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyhbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IFN0cmluZyxcbiAgICAgICAgcmFuZ2U6IE51bWJlcixcbiAgICAgICAgcHJpY2U6IE51bWJlcixcbiAgICAgICAgbWluX2FuZF9tYXhfbnVtYmVyOiBOdW1iZXIsXG4gICAgICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgICB9LFxuICAgIF0pXG4gIH0pXG59KVxuIl19