"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('User auth', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('login with a user', async ({ client, route }) => {
        const response = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        response.assertStatus(200);
        response.assertBodyContains({
            token: {
                type: 'bearer',
            },
            user: {
                email: 'admin@example.com',
            },
        });
    });
    (0, runner_1.test)('login with invalid credentials', async ({ client, route }) => {
        const response = await client.post(route('AuthController.login')).form({
            email: 'user@example.com',
            password: 'test123',
        });
        response.assertStatus(401);
        response.assertBodyContains({
            message: 'Invalid credentials',
            originalError: 'E_INVALID_AUTH_UID: User not found',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0aC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkZBQWlEO0FBRWpELHlDQUFtQztBQUVuQyxhQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQzFCLE1BQU0sa0JBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1FBRXZDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ25ELENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDcEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3JFLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUUxQixRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUIsS0FBSyxFQUFFO2dCQUNMLElBQUksRUFBRSxRQUFRO2FBQ2Y7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxFQUFFLG1CQUFtQjthQUMzQjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsZ0NBQWdDLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDakUsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3JFLEtBQUssRUFBRSxrQkFBa0I7WUFDekIsUUFBUSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUUxQixRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUIsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixhQUFhLEVBQUUsb0NBQW9DO1NBQ3BELENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5cbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ1VzZXIgYXV0aCcsIChncm91cCkgPT4ge1xuICBncm91cC5lYWNoLnNldHVwKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcblxuICAgIHJldHVybiAoKSA9PiBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcblxuICB0ZXN0KCdsb2dpbiB3aXRoIGEgdXNlcicsIGFzeW5jICh7IGNsaWVudCwgcm91dGUgfSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ0F1dGhDb250cm9sbGVyLmxvZ2luJykpLmZvcm0oe1xuICAgICAgZW1haWw6ICdhZG1pbkBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgIH0pXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHtcbiAgICAgIHRva2VuOiB7XG4gICAgICAgIHR5cGU6ICdiZWFyZXInLFxuICAgICAgfSxcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgZW1haWw6ICdhZG1pbkBleGFtcGxlLmNvbScsXG4gICAgICB9LFxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnbG9naW4gd2l0aCBpbnZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnQXV0aENvbnRyb2xsZXIubG9naW4nKSkuZm9ybSh7XG4gICAgICBlbWFpbDogJ3VzZXJAZXhhbXBsZS5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICd0ZXN0MTIzJyxcbiAgICB9KVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQwMSlcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBtZXNzYWdlOiAnSW52YWxpZCBjcmVkZW50aWFscycsXG4gICAgICBvcmlnaW5hbEVycm9yOiAnRV9JTlZBTElEX0FVVEhfVUlEOiBVc2VyIG5vdCBmb3VuZCcsXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=