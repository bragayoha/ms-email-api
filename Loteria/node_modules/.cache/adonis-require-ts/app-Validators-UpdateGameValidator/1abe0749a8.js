"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class UpdateGameValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.refs = Validator_1.schema.refs({
            id: this.ctx.params.id,
        });
        this.schema = Validator_1.schema.create({
            type: Validator_1.schema.string.optional({ trim: true }, [
                Validator_1.rules.required(),
                Validator_1.rules.unique({
                    table: 'games',
                    column: 'type',
                    caseInsensitive: true,
                    whereNot: { id: this.refs.id },
                }),
                Validator_1.rules.regex(/^[a-zA-ZÀ-ÿ\u00f1\u00d1]*$/g),
            ]),
            description: Validator_1.schema.string.optional({ trim: true }, [Validator_1.rules.required()]),
            range: Validator_1.schema.number.optional([Validator_1.rules.required(), Validator_1.rules.unsigned()]),
            price: Validator_1.schema.number.optional([Validator_1.rules.required(), Validator_1.rules.unsigned()]),
            minAndMaxValue: Validator_1.schema.number.optional([Validator_1.rules.required(), Validator_1.rules.unsigned()]),
            color: Validator_1.schema.string.optional({ trim: true }, [
                Validator_1.rules.required(),
                Validator_1.rules.unique({ table: 'games', column: 'color', whereNot: { id: this.refs.id } }),
                Validator_1.rules.regex(/^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$/),
            ]),
        });
        this.messages = {};
    }
}
exports.default = UpdateGameValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBkYXRlR2FtZVZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVwZGF0ZUdhbWVWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyRUFBMEQ7QUFHMUQsTUFBcUIsbUJBQW1CO0lBQ3RDLFlBQXNCLEdBQXdCO1FBQXhCLFFBQUcsR0FBSCxHQUFHLENBQXFCO1FBRXZDLFNBQUksR0FBRyxrQkFBTSxDQUFDLElBQUksQ0FBQztZQUN4QixFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtTQUN2QixDQUFDLENBQUE7UUFFSyxXQUFNLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDNUIsSUFBSSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDM0MsaUJBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2hCLGlCQUFLLENBQUMsTUFBTSxDQUFDO29CQUNYLEtBQUssRUFBRSxPQUFPO29CQUNkLE1BQU0sRUFBRSxNQUFNO29CQUNkLGVBQWUsRUFBRSxJQUFJO29CQUNyQixRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7aUJBQy9CLENBQUM7Z0JBQ0YsaUJBQUssQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUM7YUFDM0MsQ0FBQztZQUNGLFdBQVcsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDdkUsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGlCQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsaUJBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ25FLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxpQkFBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLGlCQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNuRSxjQUFjLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsaUJBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxpQkFBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDNUUsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDNUMsaUJBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2hCLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ2pGLGlCQUFLLENBQUMsS0FBSyxDQUFDLHFEQUFxRCxDQUFDO2FBQ25FLENBQUM7U0FDSCxDQUFDLENBQUE7UUFFSyxhQUFRLEdBQUcsRUFBRSxDQUFBO0lBNUI2QixDQUFDO0NBNkJuRDtBQTlCRCxzQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2hlbWEsIHJ1bGVzIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5pbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVcGRhdGVHYW1lVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN0eDogSHR0cENvbnRleHRDb250cmFjdCkge31cblxuICBwdWJsaWMgcmVmcyA9IHNjaGVtYS5yZWZzKHtcbiAgICBpZDogdGhpcy5jdHgucGFyYW1zLmlkLFxuICB9KVxuXG4gIHB1YmxpYyBzY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICB0eXBlOiBzY2hlbWEuc3RyaW5nLm9wdGlvbmFsKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICBydWxlcy5yZXF1aXJlZCgpLFxuICAgICAgcnVsZXMudW5pcXVlKHtcbiAgICAgICAgdGFibGU6ICdnYW1lcycsXG4gICAgICAgIGNvbHVtbjogJ3R5cGUnLFxuICAgICAgICBjYXNlSW5zZW5zaXRpdmU6IHRydWUsXG4gICAgICAgIHdoZXJlTm90OiB7IGlkOiB0aGlzLnJlZnMuaWQgfSxcbiAgICAgIH0pLFxuICAgICAgcnVsZXMucmVnZXgoL15bYS16QS1aw4Atw79cXHUwMGYxXFx1MDBkMV0qJC9nKSxcbiAgICBdKSxcbiAgICBkZXNjcmlwdGlvbjogc2NoZW1hLnN0cmluZy5vcHRpb25hbCh7IHRyaW06IHRydWUgfSwgW3J1bGVzLnJlcXVpcmVkKCldKSxcbiAgICByYW5nZTogc2NoZW1hLm51bWJlci5vcHRpb25hbChbcnVsZXMucmVxdWlyZWQoKSwgcnVsZXMudW5zaWduZWQoKV0pLFxuICAgIHByaWNlOiBzY2hlbWEubnVtYmVyLm9wdGlvbmFsKFtydWxlcy5yZXF1aXJlZCgpLCBydWxlcy51bnNpZ25lZCgpXSksXG4gICAgbWluQW5kTWF4VmFsdWU6IHNjaGVtYS5udW1iZXIub3B0aW9uYWwoW3J1bGVzLnJlcXVpcmVkKCksIHJ1bGVzLnVuc2lnbmVkKCldKSxcbiAgICBjb2xvcjogc2NoZW1hLnN0cmluZy5vcHRpb25hbCh7IHRyaW06IHRydWUgfSwgW1xuICAgICAgcnVsZXMucmVxdWlyZWQoKSxcbiAgICAgIHJ1bGVzLnVuaXF1ZSh7IHRhYmxlOiAnZ2FtZXMnLCBjb2x1bW46ICdjb2xvcicsIHdoZXJlTm90OiB7IGlkOiB0aGlzLnJlZnMuaWQgfSB9KSxcbiAgICAgIHJ1bGVzLnJlZ2V4KC9eIz8oW2EtZl18W0EtRl18WzAtOV0pezN9KChbYS1mXXxbQS1GXXxbMC05XSl7M30pPyQvKSxcbiAgICBdKSxcbiAgfSlcblxuICBwdWJsaWMgbWVzc2FnZXMgPSB7fVxufVxuIl19