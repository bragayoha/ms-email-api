"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Users store', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('make sure user content is provided', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store'));
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                { message: 'required validation failed', field: 'name' || 'cpf' || 'email' || 'password' },
            ],
        });
    });
    (0, runner_1.test)('store new user in database', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'user@test.com',
            cpf: '000.000.000-00',
            password: 'test123',
            password_confirmation: 'test123',
        });
        response.assertStatus(200);
        response.assertBodyContains({
            userFind: [{ name: 'Test User', cpf: '000.000.000-00', email: 'user@test.com' }],
        });
    });
    (0, runner_1.test)('error in store new user in database with invalid email', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'usertest.com',
            cpf: '000.000.000-00',
            password: 'test123',
            password_confirmation: 'test123',
        });
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [{ message: 'email validation failed', field: 'email', rule: 'email' }],
        });
    });
    (0, runner_1.test)('error in store new user in database with invalid password confirmation', async ({ client, route, }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'user@test.com',
            cpf: '000.000.000-00',
            password: 'test123',
            password_confirmation: 'test124',
        });
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    message: 'confirmed validation failed',
                    field: 'password_confirmation',
                    rule: 'confirmed',
                },
            ],
        });
    });
    (0, runner_1.test)('error in store new user in database with invalid cpf format', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'user@test.com',
            cpf: '000.000.000-0',
            password: 'test123',
            password_confirmation: 'test123',
        });
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    message: 'regex validation failed',
                    field: 'cpf',
                    rule: 'regex',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0b3JlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyRkFBaUQ7QUFFakQseUNBQW1DO0FBRW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUE7UUFFdkMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNyRSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQTtRQUVsRSxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUU7Z0JBQ04sRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLE1BQU0sSUFBSSxLQUFLLElBQUksT0FBTyxJQUFJLFVBQVUsRUFBRTthQUMzRjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDN0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3RFLElBQUksRUFBRSxX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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJ1xuXG5pbXBvcnQgeyB0ZXN0IH0gZnJvbSAnQGphcGEvcnVubmVyJ1xuXG50ZXN0Lmdyb3VwKCdVc2VycyBzdG9yZScsIChncm91cCkgPT4ge1xuICBncm91cC5lYWNoLnNldHVwKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcblxuICAgIHJldHVybiAoKSA9PiBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcblxuICB0ZXN0KCdtYWtlIHN1cmUgdXNlciBjb250ZW50IGlzIHByb3ZpZGVkJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnVXNlcnNDb250cm9sbGVyLnN0b3JlJykpXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoNDIyKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHtcbiAgICAgIGVycm9yczogW1xuICAgICAgICB7IG1lc3NhZ2U6ICdyZXF1aXJlZCB2YWxpZGF0aW9uIGZhaWxlZCcsIGZpZWxkOiAnbmFtZScgfHwgJ2NwZicgfHwgJ2VtYWlsJyB8fCAncGFzc3dvcmQnIH0sXG4gICAgICBdLFxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnc3RvcmUgbmV3IHVzZXIgaW4gZGF0YWJhc2UnLCBhc3luYyAoeyBjbGllbnQsIHJvdXRlIH0pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wb3N0KHJvdXRlKCdVc2Vyc0NvbnRyb2xsZXIuc3RvcmUnKSkuZm9ybSh7XG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIGVtYWlsOiAndXNlckB0ZXN0LmNvbScsXG4gICAgICBjcGY6ICcwMDAuMDAwLjAwMC0wMCcsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgICAgcGFzc3dvcmRfY29uZmlybWF0aW9uOiAndGVzdDEyMycsXG4gICAgfSlcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDApXG5cbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe1xuICAgICAgdXNlckZpbmQ6IFt7IG5hbWU6ICdUZXN0IFVzZXInLCBjcGY6ICcwMDAuMDAwLjAwMC0wMCcsIGVtYWlsOiAndXNlckB0ZXN0LmNvbScgfV0sXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0KCdlcnJvciBpbiBzdG9yZSBuZXcgdXNlciBpbiBkYXRhYmFzZSB3aXRoIGludmFsaWQgZW1haWwnLCBhc3luYyAoeyBjbGllbnQsIHJvdXRlIH0pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wb3N0KHJvdXRlKCdVc2Vyc0NvbnRyb2xsZXIuc3RvcmUnKSkuZm9ybSh7XG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIGVtYWlsOiAndXNlcnRlc3QuY29tJyxcbiAgICAgIGNwZjogJzAwMC4wMDAuMDAwLTAwJyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdDEyMycsXG4gICAgICBwYXNzd29yZF9jb25maXJtYXRpb246ICd0ZXN0MTIzJyxcbiAgICB9KVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQyMilcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFt7IG1lc3NhZ2U6ICdlbWFpbCB2YWxpZGF0aW9uIGZhaWxlZCcsIGZpZWxkOiAnZW1haWwnLCBydWxlOiAnZW1haWwnIH1dLFxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgnZXJyb3IgaW4gc3RvcmUgbmV3IHVzZXIgaW4gZGF0YWJhc2Ugd2l0aCBpbnZhbGlkIHBhc3N3b3JkIGNvbmZpcm1hdGlvbicsIGFzeW5jICh7XG4gICAgY2xpZW50LFxuICAgIHJvdXRlLFxuICB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnVXNlcnNDb250cm9sbGVyLnN0b3JlJykpLmZvcm0oe1xuICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICBlbWFpbDogJ3VzZXJAdGVzdC5jb20nLFxuICAgICAgY3BmOiAnMDAwLjAwMC4wMDAtMDAnLFxuICAgICAgcGFzc3dvcmQ6ICd0ZXN0MTIzJyxcbiAgICAgIHBhc3N3b3JkX2NvbmZpcm1hdGlvbjogJ3Rlc3QxMjQnLFxuICAgIH0pXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoNDIyKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHtcbiAgICAgIGVycm9yczogW1xuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogJ2NvbmZpcm1lZCB2YWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICAgICAgZmllbGQ6ICdwYXNzd29yZF9jb25maXJtYXRpb24nLFxuICAgICAgICAgIHJ1bGU6ICdjb25maXJtZWQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QoJ2Vycm9yIGluIHN0b3JlIG5ldyB1c2VyIGluIGRhdGFiYXNlIHdpdGggaW52YWxpZCBjcGYgZm9ybWF0JywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnVXNlcnNDb250cm9sbGVyLnN0b3JlJykpLmZvcm0oe1xuICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICBlbWFpbDogJ3VzZXJAdGVzdC5jb20nLFxuICAgICAgY3BmOiAnMDAwLjAwMC4wMDAtMCcsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgICAgcGFzc3dvcmRfY29uZmlybWF0aW9uOiAndGVzdDEyMycsXG4gICAgfSlcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cyg0MjIpXG5cbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe1xuICAgICAgZXJyb3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAncmVnZXggdmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgICAgIGZpZWxkOiAnY3BmJyxcbiAgICAgICAgICBydWxlOiAncmVnZXgnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==