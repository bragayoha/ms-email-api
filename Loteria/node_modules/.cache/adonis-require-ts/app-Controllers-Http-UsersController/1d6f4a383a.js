"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Role_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Role"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const sendMail_1 = global[Symbol.for('ioc.use')]("App/Services/sendMail");
const AccessAllowValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/AccessAllowValidator"));
const CreateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateUserValidator"));
const ResetPasswordValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/ResetPasswordValidator"));
const UpdateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/UpdateUserValidator"));
const dayjs_1 = __importDefault(require("dayjs"));
class UsersController {
    async index({ request, response }) {
        const { page, perPage, noPaginate } = request.qs();
        if (noPaginate) {
            return User_1.default.query().preload('roles', (roleTable) => {
                roleTable.select('id', 'name');
            });
        }
        try {
            const users = await User_1.default.query()
                .preload('roles', (roleTable) => {
                roleTable.select('id', 'name');
            })
                .paginate(page || 1, perPage || 10);
            return response.ok(users);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in list users', originalError: error.message });
        }
    }
    async store({ response, request }) {
        const data = await request.validate(CreateUserValidator_1.default);
        let user;
        const trx = await Database_1.default.transaction();
        try {
            user = await User_1.default.create({
                name: data.name,
                cpf: data.cpf,
                email: data.email,
                password: data.password,
            }, trx);
            const rolePlayer = await Role_1.default.findBy('name', 'player');
            if (rolePlayer)
                await user.related('roles').attach([rolePlayer.id]);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in create user', originalError: error.message });
        }
        let userFind;
        try {
            userFind = await User_1.default.query().where('id', user.id).preload('roles');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find user', originalError: error.message });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'email/welcome');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in send welcome email',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok({ userFind });
    }
    async show({ response, params }) {
        const userSecureId = params.id;
        try {
            const user = await User_1.default.query()
                .where('secure_id', userSecureId)
                .preload('roles')
                .preload('bets', (bet) => {
                const currentDateLess30days = (0, dayjs_1.default)().subtract(30, 'd').format();
                bet.where('created_at', '>', currentDateLess30days);
            });
            return response.ok(user);
        }
        catch (error) {
            return response.notFound({ message: 'User not found', originalError: error.message });
        }
    }
    async update({ request, response, params }) {
        const data = await request.validate(UpdateUserValidator_1.default);
        const userSecureId = params.id;
        let user;
        const trx = await Database_1.default.transaction();
        try {
            user = await User_1.default.findByOrFail('secure_id', userSecureId);
            user.merge({ name: data.name, cpf: data.cpf, email: data.email }, trx).save();
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in update user', originalError: error.message });
        }
        let userFind;
        try {
            userFind = await User_1.default.query().where('id', user.id).preload('roles');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find user', originalError: error.message });
        }
        trx.commit();
        return response.ok({ userFind });
    }
    async destroy({ response, params }) {
        const userSecureId = params.id;
        try {
            const user = await User_1.default.findByOrFail('secure_id', userSecureId);
            await user.delete();
            return response.ok({ message: 'Success in delete user' });
        }
        catch (error) {
            return response.notFound({ message: 'User not found', originalError: error.message });
        }
    }
    async forgetPassword({ response, params }) {
        const secureId = params.id;
        let user;
        const trx = await Database_1.default.transaction();
        try {
            user = await User_1.default.findByOrFail('secure_id', secureId);
            const rememberMeToken = await Hash_1.default.make(user.cpf + (0, dayjs_1.default)().format());
            user.merge({ rememberMeToken: rememberMeToken }, trx).save();
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in generate token',
                originalError: error.message,
            });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'email/reset_password');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in send email', originalError: error.message });
        }
        trx.commit();
        return response.ok({ message: 'Success in send recovery email!' });
    }
    async resetPassword({ request, response }) {
        const data = await request.validate(ResetPasswordValidator_1.default);
        const trx = await Database_1.default.transaction();
        let user;
        try {
            user = await User_1.default.findByOrFail('remember_me_token', data.rememberMeToken);
            if (user.rememberMeToken === data.rememberMeToken) {
                user.merge(data.password).useTransaction(trx);
                await user.save();
            }
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in reset password',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok({ message: 'Success in reset password' });
    }
    async AccessAllow({ response, request }) {
        await request.validate(AccessAllowValidator_1.default);
        const { userId, roles } = request.all();
        try {
            const userAllow = await User_1.default.findByOrFail('id', userId);
            let roleIds = [];
            await Promise.all(roles.map(async (roleName) => {
                const hasRole = await Role_1.default.findBy('name', roleName);
                if (hasRole)
                    roleIds.push(hasRole.id);
            }));
            await userAllow.related('roles').sync(roleIds);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in access allow', originalError: error.message });
        }
        try {
            return User_1.default.query().where('id', userId).preload('roles').firstOrFail();
        }
        catch (error) {
            return response.badRequest({ message: 'Error in find user', originalError: error.message });
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0ZBQXdDO0FBRXhDLDJGQUFpRDtBQUNqRCxpRkFBa0M7QUFDbEMsaUZBQWtDO0FBQ2xDLDBFQUFnRDtBQUNoRCxxSEFBc0U7QUFDdEUsbUhBQW9FO0FBQ3BFLHlIQUEwRTtBQUMxRSxtSEFBb0U7QUFDcEUsa0RBQXlCO0FBRXpCLE1BQXFCLGVBQWU7SUFDM0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzNELE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQTtRQUVsRCxJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDakQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDaEMsQ0FBQyxDQUFDLENBQUE7U0FDSDtRQUVELElBQUk7WUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUU7aUJBQzdCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDOUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDaEMsQ0FBQyxDQUFDO2lCQUNELFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUVyQyxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDMUI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxF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QUFhLEVBQUUsQ0FBQTtZQUUxQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUU7Z0JBQzNCLE1BQU0sT0FBTyxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7Z0JBQ25ELElBQUksT0FBTztvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUN2QyxDQUFDLENBQUMsQ0FDSCxDQUFBO1lBRUQsTUFBTSxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUMvQztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtTQUMvRjtRQUVELElBQUk7WUFDRixPQUFPLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtTQUN2RTtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtTQUM1RjtJQUNILENBQUM7Q0FDRjtBQW5ORCxrQ0FtTkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGFzaCBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0hhc2gnXG5pbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJ1xuaW1wb3J0IFJvbGUgZnJvbSAnQXBwL01vZGVscy9Sb2xlJ1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuaW1wb3J0IHsgc2VuZE1haWwgfSBmcm9tICdBcHAvU2VydmljZXMvc2VuZE1haWwnXG5pbXBvcnQgQWNjZXNzQWxsb3dWYWxpZGF0b3IgZnJvbSAnQXBwL1ZhbGlkYXRvcnMvQWNjZXNzQWxsb3dWYWxpZGF0b3InXG5pbXBvcnQgQ3JlYXRlVXNlclZhbGlkYXRvciBmcm9tICdBcHAvVmFsaWRhdG9ycy9DcmVhdGVVc2VyVmFsaWRhdG9yJ1xuaW1wb3J0IFJlc2V0UGFzc3dvcmRWYWxpZGF0b3IgZnJvbSAnQXBwL1ZhbGlkYXRvcnMvUmVzZXRQYXNzd29yZFZhbGlkYXRvcidcbmltcG9ydCBVcGRhdGVVc2VyVmFsaWRhdG9yIGZyb20gJ0FwcC9WYWxpZGF0b3JzL1VwZGF0ZVVzZXJWYWxpZGF0b3InXG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJzQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyBpbmRleCh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB7IHBhZ2UsIHBlclBhZ2UsIG5vUGFnaW5hdGUgfSA9IHJlcXVlc3QucXMoKVxuXG4gICAgaWYgKG5vUGFnaW5hdGUpIHtcbiAgICAgIHJldHVybiBVc2VyLnF1ZXJ5KCkucHJlbG9hZCgncm9sZXMnLCAocm9sZVRhYmxlKSA9PiB7XG4gICAgICAgIHJvbGVUYWJsZS5zZWxlY3QoJ2lkJywgJ25hbWUnKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCBVc2VyLnF1ZXJ5KClcbiAgICAgICAgLnByZWxvYWQoJ3JvbGVzJywgKHJvbGVUYWJsZSkgPT4ge1xuICAgICAgICAgIHJvbGVUYWJsZS5zZWxlY3QoJ2lkJywgJ25hbWUnKVxuICAgICAgICB9KVxuICAgICAgICAucGFnaW5hdGUocGFnZSB8fCAxLCBwZXJQYWdlIHx8IDEwKVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2sodXNlcnMpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHsgbWVzc2FnZTogJ0Vycm9yIGluIGxpc3QgdXNlcnMnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVzcG9uc2UsIHJlcXVlc3QgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKENyZWF0ZVVzZXJWYWxpZGF0b3IpXG5cbiAgICBsZXQgdXNlclxuXG4gICAgY29uc3QgdHJ4ID0gYXdhaXQgRGF0YWJhc2UudHJhbnNhY3Rpb24oKVxuICAgIHRyeSB7XG4gICAgICB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgICAgY3BmOiBkYXRhLmNwZixcbiAgICAgICAgICBlbWFpbDogZGF0YS5lbWFpbCxcbiAgICAgICAgICBwYXNzd29yZDogZGF0YS5wYXNzd29yZCxcbiAgICAgICAgfSxcbiAgICAgICAgdHJ4XG4gICAgICApXG5cbiAgICAgIGNvbnN0IHJvbGVQbGF5ZXIgPSBhd2FpdCBSb2xlLmZpbmRCeSgnbmFtZScsICdwbGF5ZXInKVxuXG4gICAgICBpZiAocm9sZVBsYXllcikgYXdhaXQgdXNlci5yZWxhdGVkKCdyb2xlcycpLmF0dGFjaChbcm9sZVBsYXllci5pZF0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7IG1lc3NhZ2U6ICdFcnJvciBpbiBjcmVhdGUgdXNlcicsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG5cbiAgICBsZXQgdXNlckZpbmRcbiAgICB0cnkge1xuICAgICAgdXNlckZpbmQgPSBhd2FpdCBVc2VyLnF1ZXJ5KCkud2hlcmUoJ2lkJywgdXNlci5pZCkucHJlbG9hZCgncm9sZXMnKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cngucm9sbGJhY2soKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoeyBtZXNzYWdlOiAnRXJyb3IgaW4gZmluZCB1c2VyJywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBzZW5kTWFpbCh1c2VyLCAnZW1haWwvd2VsY29tZScpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvciBpbiBzZW5kIHdlbGNvbWUgZW1haWwnLFxuICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0cnguY29tbWl0KClcbiAgICByZXR1cm4gcmVzcG9uc2Uub2soeyB1c2VyRmluZCB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNob3coeyByZXNwb25zZSwgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB1c2VyU2VjdXJlSWQgPSBwYXJhbXMuaWRcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAgIC53aGVyZSgnc2VjdXJlX2lkJywgdXNlclNlY3VyZUlkKVxuICAgICAgICAucHJlbG9hZCgncm9sZXMnKVxuICAgICAgICAucHJlbG9hZCgnYmV0cycsIChiZXQpID0+IHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZUxlc3MzMGRheXMgPSBkYXlqcygpLnN1YnRyYWN0KDMwLCAnZCcpLmZvcm1hdCgpXG5cbiAgICAgICAgICBiZXQud2hlcmUoJ2NyZWF0ZWRfYXQnLCAnPicsIGN1cnJlbnREYXRlTGVzczMwZGF5cylcbiAgICAgICAgfSlcblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKHVzZXIpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5ub3RGb3VuZCh7IG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlKHsgcmVxdWVzdCwgcmVzcG9uc2UsIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoVXBkYXRlVXNlclZhbGlkYXRvcilcblxuICAgIGNvbnN0IHVzZXJTZWN1cmVJZCA9IHBhcmFtcy5pZFxuXG4gICAgbGV0IHVzZXJcblxuICAgIGNvbnN0IHRyeCA9IGF3YWl0IERhdGFiYXNlLnRyYW5zYWN0aW9uKClcblxuICAgIHRyeSB7XG4gICAgICB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlPckZhaWwoJ3NlY3VyZV9pZCcsIHVzZXJTZWN1cmVJZClcbiAgICAgIHVzZXIubWVyZ2UoeyBuYW1lOiBkYXRhLm5hbWUsIGNwZjogZGF0YS5jcGYsIGVtYWlsOiBkYXRhLmVtYWlsIH0sIHRyeCkuc2F2ZSgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7IG1lc3NhZ2U6ICdFcnJvciBpbiB1cGRhdGUgdXNlcicsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG5cbiAgICBsZXQgdXNlckZpbmRcbiAgICB0cnkge1xuICAgICAgdXNlckZpbmQgPSBhd2FpdCBVc2VyLnF1ZXJ5KCkud2hlcmUoJ2lkJywgdXNlci5pZCkucHJlbG9hZCgncm9sZXMnKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cngucm9sbGJhY2soKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoeyBtZXNzYWdlOiAnRXJyb3IgaW4gZmluZCB1c2VyJywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cblxuICAgIHRyeC5jb21taXQoKVxuICAgIHJldHVybiByZXNwb25zZS5vayh7IHVzZXJGaW5kIH0pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSh7IHJlc3BvbnNlLCBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHVzZXJTZWN1cmVJZCA9IHBhcmFtcy5pZFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgnc2VjdXJlX2lkJywgdXNlclNlY3VyZUlkKVxuICAgICAgYXdhaXQgdXNlci5kZWxldGUoKVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2Uub2soeyBtZXNzYWdlOiAnU3VjY2VzcyBpbiBkZWxldGUgdXNlcicgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLm5vdEZvdW5kKHsgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJywgb3JpZ2luYWxFcnJvcjogZXJyb3IubWVzc2FnZSB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBmb3JnZXRQYXNzd29yZCh7IHJlc3BvbnNlLCBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHNlY3VyZUlkID0gcGFyYW1zLmlkXG5cbiAgICBsZXQgdXNlclxuXG4gICAgY29uc3QgdHJ4ID0gYXdhaXQgRGF0YWJhc2UudHJhbnNhY3Rpb24oKVxuXG4gICAgdHJ5IHtcbiAgICAgIHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgnc2VjdXJlX2lkJywgc2VjdXJlSWQpXG4gICAgICBjb25zdCByZW1lbWJlck1lVG9rZW4gPSBhd2FpdCBIYXNoLm1ha2UodXNlci5jcGYgKyBkYXlqcygpLmZvcm1hdCgpKVxuICAgICAgdXNlci5tZXJnZSh7IHJlbWVtYmVyTWVUb2tlbjogcmVtZW1iZXJNZVRva2VuIH0sIHRyeCkuc2F2ZSgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvciBpbiBnZW5lcmF0ZSB0b2tlbicsXG4gICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICB9KVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2VuZE1haWwodXNlciwgJ2VtYWlsL3Jlc2V0X3Bhc3N3b3JkJylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ4LnJvbGxiYWNrKClcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHsgbWVzc2FnZTogJ0Vycm9yIGluIHNlbmQgZW1haWwnLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuXG4gICAgdHJ4LmNvbW1pdCgpXG4gICAgcmV0dXJuIHJlc3BvbnNlLm9rKHsgbWVzc2FnZTogJ1N1Y2Nlc3MgaW4gc2VuZCByZWNvdmVyeSBlbWFpbCEnIH0pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVzZXRQYXNzd29yZCh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShSZXNldFBhc3N3b3JkVmFsaWRhdG9yKVxuXG4gICAgY29uc3QgdHJ4ID0gYXdhaXQgRGF0YWJhc2UudHJhbnNhY3Rpb24oKVxuICAgIGxldCB1c2VyXG4gICAgdHJ5IHtcbiAgICAgIHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgncmVtZW1iZXJfbWVfdG9rZW4nLCBkYXRhLnJlbWVtYmVyTWVUb2tlbilcbiAgICAgIGlmICh1c2VyLnJlbWVtYmVyTWVUb2tlbiA9PT0gZGF0YS5yZW1lbWJlck1lVG9rZW4pIHtcbiAgICAgICAgdXNlci5tZXJnZShkYXRhLnBhc3N3b3JkKS51c2VUcmFuc2FjdGlvbih0cngpXG4gICAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeC5yb2xsYmFjaygpXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvciBpbiByZXNldCBwYXNzd29yZCcsXG4gICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRyeC5jb21taXQoKVxuICAgIHJldHVybiByZXNwb25zZS5vayh7IG1lc3NhZ2U6ICdTdWNjZXNzIGluIHJlc2V0IHBhc3N3b3JkJyB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIEFjY2Vzc0FsbG93KHsgcmVzcG9uc2UsIHJlcXVlc3QgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoQWNjZXNzQWxsb3dWYWxpZGF0b3IpXG5cbiAgICBjb25zdCB7IHVzZXJJZCwgcm9sZXMgfSA9IHJlcXVlc3QuYWxsKClcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyQWxsb3cgPSBhd2FpdCBVc2VyLmZpbmRCeU9yRmFpbCgnaWQnLCB1c2VySWQpXG5cbiAgICAgIGxldCByb2xlSWRzOiBudW1iZXJbXSA9IFtdXG5cbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICByb2xlcy5tYXAoYXN5bmMgKHJvbGVOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3QgaGFzUm9sZSA9IGF3YWl0IFJvbGUuZmluZEJ5KCduYW1lJywgcm9sZU5hbWUpXG4gICAgICAgICAgaWYgKGhhc1JvbGUpIHJvbGVJZHMucHVzaChoYXNSb2xlLmlkKVxuICAgICAgICB9KVxuICAgICAgKVxuXG4gICAgICBhd2FpdCB1c2VyQWxsb3cucmVsYXRlZCgncm9sZXMnKS5zeW5jKHJvbGVJZHMpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KHsgbWVzc2FnZTogJ0Vycm9yIGluIGFjY2VzcyBhbGxvdycsIG9yaWdpbmFsRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFVzZXIucXVlcnkoKS53aGVyZSgnaWQnLCB1c2VySWQpLnByZWxvYWQoJ3JvbGVzJykuZmlyc3RPckZhaWwoKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCh7IG1lc3NhZ2U6ICdFcnJvciBpbiBmaW5kIHVzZXInLCBvcmlnaW5hbEVycm9yOiBlcnJvci5tZXNzYWdlIH0pXG4gICAgfVxuICB9XG59XG4iXX0=