"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Role_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Role"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const sendMail_1 = global[Symbol.for('ioc.use')]("App/Services/sendMail");
const AccessAllowValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/AccessAllowValidator"));
const CreateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateUserValidator"));
const ResetPasswordValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/ResetPasswordValidator"));
const UpdateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/UpdateUserValidator"));
const dayjs_1 = __importDefault(require("dayjs"));
class UsersController {
    async index({ request, response }) {
        const { page, perPage, noPaginate } = request.qs();
        if (noPaginate) {
            return User_1.default.query().preload('roles', (roleTable) => {
                roleTable.select('id', 'name');
            });
        }
        try {
            const users = await User_1.default.query()
                .preload('roles', (roleTable) => {
                roleTable.select('id', 'name');
            })
                .paginate(page || 1, perPage || 10);
            return response.ok(users);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in list users', originalError: error.message });
        }
    }
    async store({ response, request }) {
        const data = await request.validate(CreateUserValidator_1.default);
        let user;
        const trx = await Database_1.default.transaction();
        try {
            user = await User_1.default.create({
                name: data.name,
                cpf: data.cpf,
                email: data.email,
                password: data.password,
            }, trx);
            const rolePlayer = await Role_1.default.findBy('name', 'player');
            if (rolePlayer)
                await user.related('roles').attach([rolePlayer.id]);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in create user', originalError: error.message });
        }
        let userFind;
        try {
            userFind = await User_1.default.query().where('id', user.id).preload('roles');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find user', originalError: error.message });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'Welcome to the Best Lottery System!', 'send_welcome_email');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in send welcome email',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok({ userFind });
    }
    async show({ response, params }) {
        const userSecureId = params.id;
        try {
            const user = await User_1.default.query()
                .where('secure_id', userSecureId)
                .preload('roles')
                .preload('bets', (bet) => {
                const currentDateLess30days = (0, dayjs_1.default)().subtract(30, 'd').format();
                bet.where('created_at', '>', currentDateLess30days);
            });
            return response.ok(user);
        }
        catch (error) {
            return response.notFound({ message: 'User not found', originalError: error.message });
        }
    }
    async update({ request, response, params }) {
        const data = await request.validate(UpdateUserValidator_1.default);
        const userSecureId = params.id;
        let user;
        const trx = await Database_1.default.transaction();
        try {
            user = await User_1.default.findByOrFail('secure_id', userSecureId);
            user.merge({ name: data.name, cpf: data.cpf, email: data.email }, trx).save();
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in update user', originalError: error.message });
        }
        let userFind;
        try {
            userFind = await User_1.default.query().where('id', user.id).preload('roles');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find user', originalError: error.message });
        }
        trx.commit();
        return response.ok({ userFind });
    }
    async destroy({ response, params }) {
        const userSecureId = params.id;
        try {
            const user = await User_1.default.findByOrFail('secure_id', userSecureId);
            await user.delete();
            return response.ok({ message: 'Success in delete user' });
        }
        catch (error) {
            return response.notFound({ message: 'User not found', originalError: error.message });
        }
    }
    async forgetPassword({ response, params }) {
        const secureId = params.id;
        let user;
        const trx = await Database_1.default.transaction();
        try {
            user = await User_1.default.findByOrFail('secure_id', secureId);
            const rememberMeToken = await Hash_1.default.make(user.cpf + (0, dayjs_1.default)().format());
            user.merge({ rememberMeToken: rememberMeToken }, trx).save();
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in generate token',
                originalError: error.message,
            });
        }
        try {
            await (0, sendMail_1.sendMail)(user, 'email/reset_password');
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in send email', originalError: error.message });
        }
        trx.commit();
        return response.ok({ message: 'Success in send recovery email!' });
    }
    async resetPassword({ request, response }) {
        const data = await request.validate(ResetPasswordValidator_1.default);
        const trx = await Database_1.default.transaction();
        let user;
        try {
            user = await User_1.default.findByOrFail('remember_me_token', data.rememberMeToken);
            if (user.rememberMeToken === data.rememberMeToken) {
                user.merge(data.password).useTransaction(trx);
                await user.save();
            }
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({
                message: 'Error in reset password',
                originalError: error.message,
            });
        }
        trx.commit();
        return response.ok({ message: 'Success in reset password' });
    }
    async AccessAllow({ response, request }) {
        await request.validate(AccessAllowValidator_1.default);
        const { userId, roles } = request.all();
        try {
            const userAllow = await User_1.default.findByOrFail('id', userId);
            let roleIds = [];
            await Promise.all(roles.map(async (roleName) => {
                const hasRole = await Role_1.default.findBy('name', roleName);
                if (hasRole)
                    roleIds.push(hasRole.id);
            }));
            await userAllow.related('roles').sync(roleIds);
        }
        catch (error) {
            return response.badRequest({ message: 'Error in access allow', originalError: error.message });
        }
        try {
            return User_1.default.query().where('id', userId).preload('roles').firstOrFail();
        }
        catch (error) {
            return response.badRequest({ message: 'Error in find user', originalError: error.message });
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,