"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/auth/build/standalone");
class AuthMiddleware {
    constructor() {
        this.redirectTo = '/login';
    }
    async authenticate(auth, guards) {
        let guardLastAttempted;
        for (let guard of guards) {
            guardLastAttempted = guard;
            if (await auth.use(guard).check()) {
                auth.defaultGuard = guard;
                return true;
            }
        }
        throw new standalone_1.AuthenticationException('Unauthorized access', 'E_UNAUTHORIZED_ACCESS', guardLastAttempted, this.redirectTo);
    }
    async handle({ auth }, next, customGuards) {
        const guards = customGuards.length ? customGuards : [auth.name];
        await this.authenticate(auth, guards);
        await next();
    }
}
exports.default = AuthMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxnRUFBeUU7QUFTekUsTUFBcUIsY0FBYztJQUFuQztRQUlZLGVBQVUsR0FBRyxRQUFRLENBQUE7SUE0RGpDLENBQUM7SUFsRFcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFpQyxFQUFFLE1BQTRCO1FBTzFGLElBQUksa0JBQXNDLENBQUE7UUFFMUMsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsa0JBQWtCLEdBQUcsS0FBSyxDQUFBO1lBRTFCLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQU1qQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQTtnQkFDekIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBS0QsTUFBTSxJQUFJLG9DQUF1QixDQUMvQixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFBO0lBQ0gsQ0FBQztJQUtNLEtBQUssQ0FBQyxNQUFNLENBQ2pCLEVBQUUsSUFBSSxFQUF1QixFQUM3QixJQUF5QixFQUN6QixZQUFrQztRQU1sQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDckMsTUFBTSxJQUFJLEVBQUUsQ0FBQTtJQUNkLENBQUM7Q0FDRjtBQWhFRCxpQ0FnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHdWFyZHNMaXN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL0F1dGgnXG5pbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uRXhjZXB0aW9uIH0gZnJvbSAnQGFkb25pc2pzL2F1dGgvYnVpbGQvc3RhbmRhbG9uZSdcblxuLyoqXG4gKiBBdXRoIG1pZGRsZXdhcmUgaXMgbWVhbnQgdG8gcmVzdHJpY3QgdW4tYXV0aGVudGljYXRlZCBhY2Nlc3MgdG8gYSBnaXZlbiByb3V0ZVxuICogb3IgYSBncm91cCBvZiByb3V0ZXMuXG4gKlxuICogWW91IG11c3QgcmVnaXN0ZXIgdGhpcyBtaWRkbGV3YXJlIGluc2lkZSBgc3RhcnQva2VybmVsLnRzYCBmaWxlIHVuZGVyIHRoZSBsaXN0XG4gKiBvZiBuYW1lZCBtaWRkbGV3YXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoTWlkZGxld2FyZSB7XG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIHJlZGlyZWN0IHRvIHdoZW4gcmVxdWVzdCBpcyBVbmF1dGhvcml6ZWRcbiAgICovXG4gIHByb3RlY3RlZCByZWRpcmVjdFRvID0gJy9sb2dpbidcblxuICAvKipcbiAgICogQXV0aGVudGljYXRlcyB0aGUgY3VycmVudCBIVFRQIHJlcXVlc3QgYWdhaW5zdCBhIGN1c3RvbSBzZXQgb2YgZGVmaW5lZFxuICAgKiBndWFyZHMuXG4gICAqXG4gICAqIFRoZSBhdXRoZW50aWNhdGlvbiBsb29wIHN0b3BzIGFzIHNvb24gYXMgdGhlIHVzZXIgaXMgYXV0aGVudGljYXRlZCB1c2luZyBhbnlcbiAgICogb2YgdGhlIG1lbnRpb25lZCBndWFyZHMgYW5kIHRoYXQgZ3VhcmQgd2lsbCBiZSB1c2VkIGJ5IHRoZSByZXN0IG9mIHRoZSBjb2RlXG4gICAqIGR1cmluZyB0aGUgY3VycmVudCByZXF1ZXN0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGF1dGhlbnRpY2F0ZShhdXRoOiBIdHRwQ29udGV4dENvbnRyYWN0WydhdXRoJ10sIGd1YXJkczogKGtleW9mIEd1YXJkc0xpc3QpW10pIHtcbiAgICAvKipcbiAgICAgKiBIb2xkIHJlZmVyZW5jZSB0byB0aGUgZ3VhcmQgbGFzdCBhdHRlbXB0ZWQgd2l0aGluIHRoZSBmb3IgbG9vcC4gV2UgcGFzc1xuICAgICAqIHRoZSByZWZlcmVuY2Ugb2YgdGhlIGd1YXJkIHRvIHRoZSBcIkF1dGhlbnRpY2F0aW9uRXhjZXB0aW9uXCIsIHNvIHRoYXRcbiAgICAgKiBpdCBjYW4gZGVjaWRlIHRoZSBjb3JyZWN0IHJlc3BvbnNlIGJlaGF2aW9yIGJhc2VkIHVwb24gdGhlIGd1YXJkXG4gICAgICogZHJpdmVyXG4gICAgICovXG4gICAgbGV0IGd1YXJkTGFzdEF0dGVtcHRlZDogc3RyaW5nIHwgdW5kZWZpbmVkXG5cbiAgICBmb3IgKGxldCBndWFyZCBvZiBndWFyZHMpIHtcbiAgICAgIGd1YXJkTGFzdEF0dGVtcHRlZCA9IGd1YXJkXG5cbiAgICAgIGlmIChhd2FpdCBhdXRoLnVzZShndWFyZCkuY2hlY2soKSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5zdHJ1Y3QgYXV0aCB0byB1c2UgdGhlIGdpdmVuIGd1YXJkIGFzIHRoZSBkZWZhdWx0IGd1YXJkIGZvclxuICAgICAgICAgKiB0aGUgcmVzdCBvZiB0aGUgcmVxdWVzdCwgc2luY2UgdGhlIHVzZXIgYXV0aGVudGljYXRlZFxuICAgICAgICAgKiBzdWNjZWVkZWQgaGVyZVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0aC5kZWZhdWx0R3VhcmQgPSBndWFyZFxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuYWJsZSB0byBhdXRoZW50aWNhdGUgdXNpbmcgYW55IGd1YXJkXG4gICAgICovXG4gICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXhjZXB0aW9uKFxuICAgICAgJ1VuYXV0aG9yaXplZCBhY2Nlc3MnLFxuICAgICAgJ0VfVU5BVVRIT1JJWkVEX0FDQ0VTUycsXG4gICAgICBndWFyZExhc3RBdHRlbXB0ZWQsXG4gICAgICB0aGlzLnJlZGlyZWN0VG9cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHJlcXVlc3RcbiAgICovXG4gIHB1YmxpYyBhc3luYyBoYW5kbGUoXG4gICAgeyBhdXRoIH06IEh0dHBDb250ZXh0Q29udHJhY3QsXG4gICAgbmV4dDogKCkgPT4gUHJvbWlzZTx2b2lkPixcbiAgICBjdXN0b21HdWFyZHM6IChrZXlvZiBHdWFyZHNMaXN0KVtdXG4gICkge1xuICAgIC8qKlxuICAgICAqIFVzZXMgdGhlIHVzZXIgZGVmaW5lZCBndWFyZHMgb3IgdGhlIGRlZmF1bHQgZ3VhcmQgbWVudGlvbmVkIGluXG4gICAgICogdGhlIGNvbmZpZyBmaWxlXG4gICAgICovXG4gICAgY29uc3QgZ3VhcmRzID0gY3VzdG9tR3VhcmRzLmxlbmd0aCA/IGN1c3RvbUd1YXJkcyA6IFthdXRoLm5hbWVdXG4gICAgYXdhaXQgdGhpcy5hdXRoZW50aWNhdGUoYXV0aCwgZ3VhcmRzKVxuICAgIGF3YWl0IG5leHQoKVxuICB9XG59XG4iXX0=