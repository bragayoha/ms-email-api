"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Bet random bets', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('user must be logged in before betting', async ({ client, route }) => {
        const response = await client.post(route('BetsController.store'));
        response.assertStatus(401);
        response.assertBodyContains({
            errors: [{ message: 'E_UNAUTHORIZED_ACCESS: Unauthorized access' }],
        });
    });
    (0, runner_1.test)('bet content isnt provided', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client.post(route('BetsController.store')).bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'required',
                    field: 'numbers' || 'game',
                    message: 'required validation failed',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tX2JldC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmFuZG9tX2JldC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkZBQWlEO0FBQ2pELHlDQUFtQztBQUVuQyxhQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDdEMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUE7UUFFdkMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyx1Q0FBdUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUN4RSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQTtRQUVqRSxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0Q0FBNEMsRUFBRSxDQUFDO1NBQ3BFLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsMkJBQTJCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDNUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2xFLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFFdEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXBGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsVUFBVTtvQkFDaEIsS0FBSyxFQUFFLFNBQVMsSUFBSSxNQUFNO29CQUMxQixPQUFPLEVBQUUsNEJBQTRCO2lCQUN0QzthQUNGO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSdcbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ0JldCByYW5kb20gYmV0cycsIChncm91cCkgPT4ge1xuICBncm91cC5lYWNoLnNldHVwKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcblxuICAgIHJldHVybiAoKSA9PiBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcblxuICB0ZXN0KCd1c2VyIG11c3QgYmUgbG9nZ2VkIGluIGJlZm9yZSBiZXR0aW5nJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnQmV0c0NvbnRyb2xsZXIuc3RvcmUnKSlcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cyg0MDEpXG5cbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe1xuICAgICAgZXJyb3JzOiBbeyBtZXNzYWdlOiAnRV9VTkFVVEhPUklaRURfQUNDRVNTOiBVbmF1dGhvcml6ZWQgYWNjZXNzJyB9XSxcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QoJ2JldCBjb250ZW50IGlzbnQgcHJvdmlkZWQnLCBhc3luYyAoeyBjbGllbnQsIHJvdXRlIH0pID0+IHtcbiAgICBjb25zdCBsb2dpbiA9IGF3YWl0IGNsaWVudC5wb3N0KHJvdXRlKCdBdXRoQ29udHJvbGxlci5sb2dpbicpKS5mb3JtKHtcbiAgICAgIGVtYWlsOiAnYWRtaW5AZXhhbXBsZS5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICd0ZXN0MTIzJyxcbiAgICB9KVxuXG4gICAgY29uc3QgdG9rZW4gPSBsb2dpbi5ib2R5KCkudG9rZW4udG9rZW5cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ0JldHNDb250cm9sbGVyLnN0b3JlJykpLmJlYXJlclRva2VuKHRva2VuKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQyMilcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgZmllbGQ6ICdudW1iZXJzJyB8fCAnZ2FtZScsXG4gICAgICAgICAgbWVzc2FnZTogJ3JlcXVpcmVkIHZhbGlkYXRpb24gZmFpbGVkJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=