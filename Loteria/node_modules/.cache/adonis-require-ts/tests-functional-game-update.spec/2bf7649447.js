"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Game update', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('user must be logged in before store a game', async ({ client }) => {
        const response = await client.put('/v1/api/games/1');
        response.assertStatus(401);
        response.assertBodyContains({
            errors: [{ message: 'E_UNAUTHORIZED_ACCESS: Unauthorized access' }],
        });
    });
    (0, runner_1.test)('game content isnt provided', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client.put('/v1/api/games/1').bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'required',
                    field: 'type' || 'description' || 'range' || 'price' || 'minAndMaxNumber' || 'color',
                    message: 'required validation failed',
                },
            ],
        });
    });
    (0, runner_1.test)('range, price and minAndMaxNumber must be positive', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Lotofacil',
            description: 'Jogo teste para teste automatizado',
            range: -15,
            price: -2.5,
            minAndMaxNumber: -5,
            color: '#7F3992',
        })
            .bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'unsigned',
                    field: 'range' || 'price' || 'minAndMaxNumber',
                    message: 'unsigned validation failed',
                },
            ],
        });
    });
    (0, runner_1.test)('type must be unique', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Quina',
            description: 'Jogo teste para teste automatizado',
            range: 15,
            price: 2.5,
            minAndMaxNumber: 5,
            color: '#7F3992',
        })
            .bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'unique',
                    field: 'type',
                    message: 'unique validation failure',
                },
            ],
        });
    });
    (0, runner_1.test)('color must be unique', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Lotofacil',
            description: 'Jogo teste para teste automatizado',
            range: 15,
            price: 2.5,
            minAndMaxNumber: 5,
            color: '#01AC66',
        })
            .bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'unique',
                    field: 'color',
                    message: 'unique validation failure',
                },
            ],
        });
    });
    (0, runner_1.test)('color must be a hexadecimal color code', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Lotofacil',
            description: 'Jogo teste para teste automatizado',
            range: 15,
            price: 2.5,
            minAndMaxNumber: 5,
            color: 'asdadada',
        })
            .bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'regex',
                    field: 'color',
                    message: 'regex validation failed',
                },
            ],
        });
    });
    (0, runner_1.test)('make sure game content is provided', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Lototest',
            description: 'Jogo teste para teste automatizado',
            range: 15,
            price: 2.5,
            minAndMaxNumber: 5,
            color: '#FFFFFF',
        })
            .bearerToken(token);
        response.assertStatus(200);
        response.assertBodyContains([
            {
                type: 'Lototest',
                description: 'Jogo teste para teste automatizado',
                range: 15,
                price: 2.5,
                min_and_max_number: 5,
                color: '#FFFFFF',
            },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,