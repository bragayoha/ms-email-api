"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Game store', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('user must be logged in before store a game', async ({ client, route }) => {
        const response = await client.post(route('GamesController.store'));
        response.assertStatus(401);
        response.assertBodyContains({
            errors: [{ message: 'E_UNAUTHORIZED_ACCESS: Unauthorized access' }],
        });
    });
    (0, runner_1.test)('game content isnt provided', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client.post(route('GamesController.store')).bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'required',
                    field: 'type' || 'description' || 'range' || 'price' || 'minAndMaxNumber' || 'color',
                    message: 'required validation failed',
                },
            ],
        });
    });
    (0, runner_1.test)('range, price and minAndMaxNumber must be positive', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Lototest',
            description: 'Jogo teste para teste automatizado',
            range: -15,
            price: -2.5,
            minAndMaxNumber: -5,
            color: '#FFFFFF',
        })
            .bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'unsigned',
                    field: 'range' || 'price' || 'minAndMaxNumber',
                    message: 'unsigned validation failed',
                },
            ],
        });
    });
    (0, runner_1.test)('type and color must be unique', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client
            .post(route('GamesController.store'))
            .form({
            type: 'Lotomania',
            description: 'Jogo teste para teste automatizado',
            range: 15,
            price: 2.5,
            minAndMaxNumber: 5,
            color: '#7F3992',
        })
            .bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'unique',
                    field: 'type' || 'color',
                    message: 'unique validation failure',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0b3JlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyRkFBaUQ7QUFDakQseUNBQW1DO0FBRW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUE7UUFFdkMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyw0Q0FBNEMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUM3RSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQTtRQUVsRSxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0Q0FBNEMsRUFBRSxDQUFDO1NBQ3BFLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDN0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2xFLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFNBQVM7U0FDcEIsQ0FBQyxDQUFBO1FBRUYsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFFdEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXJGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsVUFBVTtvQkFDaEIsS0FBSyxFQUFFLE1BQU0sSUFBSSxhQUFhLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxpQkFBaUIsSUFBSSxPQUFPO29CQUNwRixPQUFPLEVBQUUsNEJBQTRCO2lCQUN0QzthQUNGO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxtREFBbUQsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNwRixNQUFNLEtBQUssR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDbEUsS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixRQUFRLEVBQUUsU0FBUztTQUNwQixDQUFDLENBQUE7UUFFRixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQTtRQUV0QyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU07YUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2FBQ3BDLElBQUksQ0FBQztZQUNKLElBQUksRUFBRSxVQUFVO1lBQ2hCLFdBQVcsRUFBRSxvQ0FBb0M7WUFDakQsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUNWLEtBQUssRUFBRSxDQUFDLEdBQUc7WUFDWCxlQUFlLEVBQUUsQ0FBQyxDQUFDO1lBQ25CLEtBQUssRUFBRSxTQUFTO1NBQ2pCLENBQUM7YUFDRCxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFckIsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUUxQixRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUIsTUFBTSxFQUFFO2dCQUNOO29CQUNFLElBQUksRUFBRSxVQUFVO29CQUNoQixLQUFLLEVBQUUsT0FBTyxJQUFJLE9BQU8sSUFBSSxpQkFBaUI7b0JBQzlDLE9BQU8sRUFBRSw0QkFBNEI7aUJBQ3RDO2FBQ0Y7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLCtCQUErQixFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2hFLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNsRSxLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQTtRQUVGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFBO1FBRXRDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTTthQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7YUFDcEMsSUFBSSxDQUFDO1lBQ0osSUFBSSxFQUFFLFdBQVc7WUFDakIsV0FBVyxFQUFFLG9DQUFvQztZQUNqRCxLQUFLLEVBQUUsRUFBRTtZQUNULEtBQUssRUFBRSxHQUFHO1lBQ1YsZUFBZSxFQUFFLENBQUM7WUFDbEIsS0FBSyxFQUFFLFNBQVM7U0FDakIsQ0FBQzthQUNELFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUVyQixRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsS0FBSyxFQUFFLE1BQU0sSUFBSSxPQUFPO29CQUN4QixPQUFPLEVBQUUsMkJBQTJCO2lCQUNyQzthQUNGO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSdcbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ0dhbWUgc3RvcmUnLCAoZ3JvdXApID0+IHtcbiAgZ3JvdXAuZWFjaC5zZXR1cChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgRGF0YWJhc2UuYmVnaW5HbG9iYWxUcmFuc2FjdGlvbigpXG5cbiAgICByZXR1cm4gKCkgPT4gRGF0YWJhc2Uucm9sbGJhY2tHbG9iYWxUcmFuc2FjdGlvbigpXG4gIH0pXG5cbiAgdGVzdCgndXNlciBtdXN0IGJlIGxvZ2dlZCBpbiBiZWZvcmUgc3RvcmUgYSBnYW1lJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnR2FtZXNDb250cm9sbGVyLnN0b3JlJykpXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoNDAxKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHtcbiAgICAgIGVycm9yczogW3sgbWVzc2FnZTogJ0VfVU5BVVRIT1JJWkVEX0FDQ0VTUzogVW5hdXRob3JpemVkIGFjY2VzcycgfV0sXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0KCdnYW1lIGNvbnRlbnQgaXNudCBwcm92aWRlZCcsIGFzeW5jICh7IGNsaWVudCwgcm91dGUgfSkgPT4ge1xuICAgIGNvbnN0IGxvZ2luID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ0F1dGhDb250cm9sbGVyLmxvZ2luJykpLmZvcm0oe1xuICAgICAgZW1haWw6ICdhZG1pbkBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgIH0pXG5cbiAgICBjb25zdCB0b2tlbiA9IGxvZ2luLmJvZHkoKS50b2tlbi50b2tlblxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnR2FtZXNDb250cm9sbGVyLnN0b3JlJykpLmJlYXJlclRva2VuKHRva2VuKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQyMilcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgZmllbGQ6ICd0eXBlJyB8fCAnZGVzY3JpcHRpb24nIHx8ICdyYW5nZScgfHwgJ3ByaWNlJyB8fCAnbWluQW5kTWF4TnVtYmVyJyB8fCAnY29sb3InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdyZXF1aXJlZCB2YWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdCgncmFuZ2UsIHByaWNlIGFuZCBtaW5BbmRNYXhOdW1iZXIgbXVzdCBiZSBwb3NpdGl2ZScsIGFzeW5jICh7IGNsaWVudCwgcm91dGUgfSkgPT4ge1xuICAgIGNvbnN0IGxvZ2luID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ0F1dGhDb250cm9sbGVyLmxvZ2luJykpLmZvcm0oe1xuICAgICAgZW1haWw6ICdhZG1pbkBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgIH0pXG5cbiAgICBjb25zdCB0b2tlbiA9IGxvZ2luLmJvZHkoKS50b2tlbi50b2tlblxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnRcbiAgICAgIC5wb3N0KHJvdXRlKCdHYW1lc0NvbnRyb2xsZXIuc3RvcmUnKSlcbiAgICAgIC5mb3JtKHtcbiAgICAgICAgdHlwZTogJ0xvdG90ZXN0JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdKb2dvIHRlc3RlIHBhcmEgdGVzdGUgYXV0b21hdGl6YWRvJyxcbiAgICAgICAgcmFuZ2U6IC0xNSxcbiAgICAgICAgcHJpY2U6IC0yLjUsXG4gICAgICAgIG1pbkFuZE1heE51bWJlcjogLTUsXG4gICAgICAgIGNvbG9yOiAnI0ZGRkZGRicsXG4gICAgICB9KVxuICAgICAgLmJlYXJlclRva2VuKHRva2VuKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQyMilcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6ICd1bnNpZ25lZCcsXG4gICAgICAgICAgZmllbGQ6ICdyYW5nZScgfHwgJ3ByaWNlJyB8fCAnbWluQW5kTWF4TnVtYmVyJyxcbiAgICAgICAgICBtZXNzYWdlOiAndW5zaWduZWQgdmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QoJ3R5cGUgYW5kIGNvbG9yIG11c3QgYmUgdW5pcXVlJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgbG9naW4gPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnQXV0aENvbnRyb2xsZXIubG9naW4nKSkuZm9ybSh7XG4gICAgICBlbWFpbDogJ2FkbWluQGV4YW1wbGUuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdDEyMycsXG4gICAgfSlcblxuICAgIGNvbnN0IHRva2VuID0gbG9naW4uYm9keSgpLnRva2VuLnRva2VuXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudFxuICAgICAgLnBvc3Qocm91dGUoJ0dhbWVzQ29udHJvbGxlci5zdG9yZScpKVxuICAgICAgLmZvcm0oe1xuICAgICAgICB0eXBlOiAnTG90b21hbmlhJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdKb2dvIHRlc3RlIHBhcmEgdGVzdGUgYXV0b21hdGl6YWRvJyxcbiAgICAgICAgcmFuZ2U6IDE1LFxuICAgICAgICBwcmljZTogMi41LFxuICAgICAgICBtaW5BbmRNYXhOdW1iZXI6IDUsXG4gICAgICAgIGNvbG9yOiAnIzdGMzk5MicsXG4gICAgICB9KVxuICAgICAgLmJlYXJlclRva2VuKHRva2VuKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQyMilcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6ICd1bmlxdWUnLFxuICAgICAgICAgIGZpZWxkOiAndHlwZScgfHwgJ2NvbG9yJyxcbiAgICAgICAgICBtZXNzYWdlOiAndW5pcXVlIHZhbGlkYXRpb24gZmFpbHVyZScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG4gIH0pXG59KVxuIl19