"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Game update', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('user must be logged in before store a game', async ({ client }) => {
        const response = await client.put('/v1/api/games/1');
        response.assertStatus(401);
        response.assertBodyContains({
            errors: [{ message: 'E_UNAUTHORIZED_ACCESS: Unauthorized access' }],
        });
    });
    (0, runner_1.test)('game content isnt provided', async ({ client, route }) => {
        const login = await client.post(route('AuthController.login')).form({
            email: 'admin@example.com',
            password: 'test123',
        });
        const token = login.body().token.token;
        const response = await client.put('/v1/api/games/1').bearerToken(token);
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    rule: 'required',
                    field: 'type' || 'description' || 'range' || 'price' || 'minAndMaxNumber' || 'color',
                    message: 'required validation failed',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1cGRhdGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJGQUFpRDtBQUNqRCx5Q0FBbUM7QUFFbkMsYUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtRQUMxQixNQUFNLGtCQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQTtRQUV2QyxPQUFPLEdBQUcsRUFBRSxDQUFDLGtCQUFRLENBQUMseUJBQXlCLEVBQUUsQ0FBQTtJQUNuRCxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLDRDQUE0QyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDdEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFFcEQsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUUxQixRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUIsTUFBTSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsNENBQTRDLEVBQUUsQ0FBQztTQUNwRSxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLDRCQUE0QixFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQzdELE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNsRSxLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQTtRQUVGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFBO1FBRXRDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUV2RSxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLEtBQUssRUFBRSxNQUFNLElBQUksYUFBYSxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksaUJBQWlCLElBQUksT0FBTztvQkFDcEYsT0FBTyxFQUFFLDRCQUE0QjtpQkFDdEM7YUFDRjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5pbXBvcnQgeyB0ZXN0IH0gZnJvbSAnQGphcGEvcnVubmVyJ1xuXG50ZXN0Lmdyb3VwKCdHYW1lIHVwZGF0ZScsIChncm91cCkgPT4ge1xuICBncm91cC5lYWNoLnNldHVwKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcblxuICAgIHJldHVybiAoKSA9PiBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcblxuICB0ZXN0KCd1c2VyIG11c3QgYmUgbG9nZ2VkIGluIGJlZm9yZSBzdG9yZSBhIGdhbWUnLCBhc3luYyAoeyBjbGllbnQgfSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnB1dCgnL3YxL2FwaS9nYW1lcy8xJylcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cyg0MDEpXG5cbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe1xuICAgICAgZXJyb3JzOiBbeyBtZXNzYWdlOiAnRV9VTkFVVEhPUklaRURfQUNDRVNTOiBVbmF1dGhvcml6ZWQgYWNjZXNzJyB9XSxcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QoJ2dhbWUgY29udGVudCBpc250IHByb3ZpZGVkJywgYXN5bmMgKHsgY2xpZW50LCByb3V0ZSB9KSA9PiB7XG4gICAgY29uc3QgbG9naW4gPSBhd2FpdCBjbGllbnQucG9zdChyb3V0ZSgnQXV0aENvbnRyb2xsZXIubG9naW4nKSkuZm9ybSh7XG4gICAgICBlbWFpbDogJ2FkbWluQGV4YW1wbGUuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdDEyMycsXG4gICAgfSlcblxuICAgIGNvbnN0IHRva2VuID0gbG9naW4uYm9keSgpLnRva2VuLnRva2VuXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wdXQoJy92MS9hcGkvZ2FtZXMvMScpLmJlYXJlclRva2VuKHRva2VuKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDQyMilcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJ1bGU6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgZmllbGQ6ICd0eXBlJyB8fCAnZGVzY3JpcHRpb24nIHx8ICdyYW5nZScgfHwgJ3ByaWNlJyB8fCAnbWluQW5kTWF4TnVtYmVyJyB8fCAnY29sb3InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdyZXF1aXJlZCB2YWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG4gIH0pXG59KVxuIl19