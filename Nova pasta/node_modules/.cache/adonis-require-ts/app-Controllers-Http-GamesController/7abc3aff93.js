"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Cart_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cart"));
const Game_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Game"));
const CreateGameValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateGameValidator"));
const UpdateGameValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/UpdateGameValidator"));
class GamesController {
    async index({ response }) {
        const cart = await Cart_1.default.query().first();
        try {
            const games = await Game_1.default.query();
            return response.ok({ minCartValue: cart?.minCartValue, types: games });
        }
        catch (error) {
            return response.badRequest({ message: 'Error in list games', originalError: error.message });
        }
    }
    async store({ response, request }) {
        const data = await request.validate(CreateGameValidator_1.default);
        let game;
        const trx = await Database_1.default.transaction();
        try {
            game = await Game_1.default.create({
                type: data.type,
                description: data.description,
                range: data.range,
                price: data.price,
                minAndMaxNumber: data.minAndMaxNumber,
                color: data.color,
            }, trx);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in create game', originalError: error.message });
        }
        let gameFind;
        try {
            gameFind = await Game_1.default.query().where('id', game.id);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in game find', originalError: error.message });
        }
        trx.commit();
        return response.ok(gameFind);
    }
    async show({ response, params }) {
        const gameId = params.id;
        try {
            const game = await Game_1.default.query().where('id', gameId);
            return response.ok(game);
        }
        catch (error) {
            return response.notFound({ message: 'Game not found', originalError: error.message });
        }
    }
    async update({ request, response, params }) {
        const data = await request.validate(UpdateGameValidator_1.default);
        const gameId = params.id;
        let game;
        const trx = await Database_1.default.transaction();
        try {
            game = await Game_1.default.findByOrFail('id', gameId);
            game
                .merge({
                type: data.type,
                description: data.description,
                range: data.range,
                price: data.price,
                minAndMaxValue: data.minAndMaxValue,
                color: data.color,
            }, trx)
                .save();
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in update game', originalError: error.message });
        }
        let gameFind;
        try {
            gameFind = await Game_1.default.query().where('id', game.id);
        }
        catch (error) {
            trx.rollback();
            return response.badRequest({ message: 'Error in find game', originalError: error.message });
        }
        trx.commit();
        return response.ok(gameFind);
    }
    async destroy({ response, params }) {
        const gameId = params.id;
        try {
            const game = await Game_1.default.findByOrFail('id', gameId);
            await game.delete();
            return response.ok({ message: 'Game deleted successfully' });
        }
        catch (error) {
            return response.notFound({ message: 'Game not found', originalError: error.message });
        }
    }
}
exports.default = GamesController;
//# sourceMappingURL=data:application/json;base64,