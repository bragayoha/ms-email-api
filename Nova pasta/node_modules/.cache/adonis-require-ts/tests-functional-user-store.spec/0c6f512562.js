"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('Users store', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('make sure user content is provided', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store'));
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                { message: 'required validation failed', field: 'name' || 'cpf' || 'email' || 'password' },
            ],
        });
    });
    (0, runner_1.test)('store new user in database', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'user@test.com',
            cpf: '000.000.000-00',
            password: 'test123',
            password_confirmation: 'test123',
        });
        response.assertStatus(200);
        response.assertBodyContains({
            userFind: [{ name: 'Test User', cpf: '000.000.000-00', email: 'user@test.com' }],
        });
    });
    (0, runner_1.test)('error in store new user in database with invalid email', async ({ client, route }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'usertest.com',
            cpf: '000.000.000-00',
            password: 'test123',
            password_confirmation: 'test123',
        });
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [{ message: 'email validation failed', field: 'email', rule: 'email' }],
        });
    });
    (0, runner_1.test)('error in store new user in database with invalid password confirmation', async ({ client, route, }) => {
        const response = await client.post(route('UsersController.store')).form({
            name: 'Test User',
            email: 'user@test.com',
            cpf: '000.000.000-00',
            password: 'test123',
            password_confirmation: 'test124',
        });
        response.assertStatus(422);
        response.assertBodyContains({
            errors: [
                {
                    message: 'confirmed validation failed',
                    field: 'password_confirmation',
                    rule: 'confirmed',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0b3JlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyRkFBaUQ7QUFFakQseUNBQW1DO0FBRW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUE7UUFFdkMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNyRSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQTtRQUVsRSxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUU7Z0JBQ04sRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLE1BQU0sSUFBSSxLQUFLLElBQUksT0FBTyxJQUFJLFVBQVUsRUFBRTthQUMzRjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDN0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3RFLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxlQUFlO1lBQ3RCLEdBQUcsRUFBRSxnQkFBZ0I7WUFDckIsUUFBUSxFQUFFLFNBQVM7WUFDbkIscUJBQXFCLEVBQUUsU0FBUztTQUNqQyxDQUFDLENBQUE7UUFFRixRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQztTQUNqRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLHdEQUF3RCxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3pGLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN0RSxJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsY0FBYztZQUNyQixHQUFHLEVBQUUsZ0JBQWdCO1lBQ3JCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLHFCQUFxQixFQUFFLFNBQVM7U0FDakMsQ0FBQyxDQUFBO1FBRUYsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUUxQixRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUIsTUFBTSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7U0FDaEYsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyx3RUFBd0UsRUFBRSxLQUFLLEVBQUUsRUFDcEYsTUFBTSxFQUNOLEtBQUssR0FDTixFQUFFLEVBQUU7UUFDSCxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDdEUsSUFBSSxFQUFFLFdBQVc7WUFDakIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsR0FBRyxFQUFFLGdCQUFnQjtZQUNyQixRQUFRLEVBQUUsU0FBUztZQUNuQixxQkFBcUIsRUFBRSxTQUFTO1NBQ2pDLENBQUMsQ0FBQTtRQUVGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxPQUFPLEVBQUUsNkJBQTZCO29CQUN0QyxLQUFLLEVBQUUsdUJBQXVCO29CQUM5QixJQUFJLEVBQUUsV0FBVztpQkFDbEI7YUFDRjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5cbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ1VzZXJzIHN0b3JlJywgKGdyb3VwKSA9PiB7XG4gIGdyb3VwLmVhY2guc2V0dXAoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IERhdGFiYXNlLmJlZ2luR2xvYmFsVHJhbnNhY3Rpb24oKVxuXG4gICAgcmV0dXJuICgpID0+IERhdGFiYXNlLnJvbGxiYWNrR2xvYmFsVHJhbnNhY3Rpb24oKVxuICB9KVxuXG4gIHRlc3QoJ21ha2Ugc3VyZSB1c2VyIGNvbnRlbnQgaXMgcHJvdmlkZWQnLCBhc3luYyAoeyBjbGllbnQsIHJvdXRlIH0pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wb3N0KHJvdXRlKCdVc2Vyc0NvbnRyb2xsZXIuc3RvcmUnKSlcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cyg0MjIpXG5cbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe1xuICAgICAgZXJyb3JzOiBbXG4gICAgICAgIHsgbWVzc2FnZTogJ3JlcXVpcmVkIHZhbGlkYXRpb24gZmFpbGVkJywgZmllbGQ6ICduYW1lJyB8fCAnY3BmJyB8fCAnZW1haWwnIHx8ICdwYXNzd29yZCcgfSxcbiAgICAgIF0sXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0KCdzdG9yZSBuZXcgdXNlciBpbiBkYXRhYmFzZScsIGFzeW5jICh7IGNsaWVudCwgcm91dGUgfSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ1VzZXJzQ29udHJvbGxlci5zdG9yZScpKS5mb3JtKHtcbiAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgZW1haWw6ICd1c2VyQHRlc3QuY29tJyxcbiAgICAgIGNwZjogJzAwMC4wMDAuMDAwLTAwJyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdDEyMycsXG4gICAgICBwYXNzd29yZF9jb25maXJtYXRpb246ICd0ZXN0MTIzJyxcbiAgICB9KVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcblxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICB1c2VyRmluZDogW3sgbmFtZTogJ1Rlc3QgVXNlcicsIGNwZjogJzAwMC4wMDAuMDAwLTAwJywgZW1haWw6ICd1c2VyQHRlc3QuY29tJyB9XSxcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QoJ2Vycm9yIGluIHN0b3JlIG5ldyB1c2VyIGluIGRhdGFiYXNlIHdpdGggaW52YWxpZCBlbWFpbCcsIGFzeW5jICh7IGNsaWVudCwgcm91dGUgfSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3Qocm91dGUoJ1VzZXJzQ29udHJvbGxlci5zdG9yZScpKS5mb3JtKHtcbiAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgZW1haWw6ICd1c2VydGVzdC5jb20nLFxuICAgICAgY3BmOiAnMDAwLjAwMC4wMDAtMDAnLFxuICAgICAgcGFzc3dvcmQ6ICd0ZXN0MTIzJyxcbiAgICAgIHBhc3N3b3JkX2NvbmZpcm1hdGlvbjogJ3Rlc3QxMjMnLFxuICAgIH0pXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoNDIyKVxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHtcbiAgICAgIGVycm9yczogW3sgbWVzc2FnZTogJ2VtYWlsIHZhbGlkYXRpb24gZmFpbGVkJywgZmllbGQ6ICdlbWFpbCcsIHJ1bGU6ICdlbWFpbCcgfV0sXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0KCdlcnJvciBpbiBzdG9yZSBuZXcgdXNlciBpbiBkYXRhYmFzZSB3aXRoIGludmFsaWQgcGFzc3dvcmQgY29uZmlybWF0aW9uJywgYXN5bmMgKHtcbiAgICBjbGllbnQsXG4gICAgcm91dGUsXG4gIH0pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wb3N0KHJvdXRlKCdVc2Vyc0NvbnRyb2xsZXIuc3RvcmUnKSkuZm9ybSh7XG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIGVtYWlsOiAndXNlckB0ZXN0LmNvbScsXG4gICAgICBjcGY6ICcwMDAuMDAwLjAwMC0wMCcsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QxMjMnLFxuICAgICAgcGFzc3dvcmRfY29uZmlybWF0aW9uOiAndGVzdDEyNCcsXG4gICAgfSlcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cyg0MjIpXG5cbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe1xuICAgICAgZXJyb3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnY29uZmlybWVkIHZhbGlkYXRpb24gZmFpbGVkJyxcbiAgICAgICAgICBmaWVsZDogJ3Bhc3N3b3JkX2NvbmZpcm1hdGlvbicsXG4gICAgICAgICAgcnVsZTogJ2NvbmZpcm1lZCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG4gIH0pXG59KVxuIl19